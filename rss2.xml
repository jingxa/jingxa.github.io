<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jingxa&#39;s Blog</title>
    <link>https://jingxa.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>单影无人相依偎！</description>
    <pubDate>Fri, 29 Jun 2018 08:24:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CS231A_Homework_2.4</title>
      <link>https://jingxa.github.io/2018/06/29/CS231A-Homework-2-4/</link>
      <guid>https://jingxa.github.io/2018/06/29/CS231A-Homework-2-4/</guid>
      <pubDate>Fri, 29 Jun 2018 08:22:58 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;cs231A Homework-2:ps-code2-part-4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;四、Triangulation&quot;&gt;&lt;a href=&quot;#四、Triangulation&quot; class=&quot;headerli
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>cs231A Homework-2:ps-code2-part-4</p></blockquote><hr><h1 id="四、Triangulation"><a href="#四、Triangulation" class="headerlink" title="四、Triangulation"></a>四、Triangulation</h1><h2 id="1-计算过程"><a href="#1-计算过程" class="headerlink" title="1 计算过程"></a>1 计算过程</h2><p>在一个SFM问题中，<br><img src="https://upload-images.jianshu.io/upload_images/5361608-6963a262144aef6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="1-1-变换矩阵"><a href="#1-1-变换矩阵" class="headerlink" title="1.1 变换矩阵"></a>1.1 变换矩阵</h3><ul><li>透视投影中，变换矩阵共有11个自由度；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-3edbf7feab88f62d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="1-1-1-模糊性"><a href="#1-1-1-模糊性" class="headerlink" title="1.1.1 模糊性"></a>1.1.1 模糊性</h3><ul><li>投影变换中，可以用一个任意的4*4矩阵来表达模糊性</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-b04ee09379b657e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="1-1-2-问题"><a href="#1-1-2-问题" class="headerlink" title="1.1.2 问题"></a>1.1.2 问题</h3><ul><li>对于M张图片， n个3D点，存在变换：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-25be029e4a34cfa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p>因此，SFM问题==&gt; 从m<em>n的观察点中，估计m个3  </em> 4的矩阵和n个位置点；</p></li><li><p>上面可知：已知道的参数为：m张图片；</p><ul><li>如果相机未被校准，3d点也未知，不能计算 从3d点到2d的变换，也就无法求得相机矩阵；</li><li>因此，【采用一种4 * 4投影矩阵，现将点投影过后进行变换】（这个没有搞懂）</li></ul></li></ul><p>-等式的需求：</p><ul><li>11<em>m + 3</em>n -15 个未知数需要 2m*n个等式</li></ul><blockquote><p>不懂为什么要减去15</p></blockquote><hr><h2 id="2-计算方法"><a href="#2-计算方法" class="headerlink" title="2 计算方法"></a>2 计算方法</h2><h3 id="2-1-线性法（通过基础矩阵）"><a href="#2-1-线性法（通过基础矩阵）" class="headerlink" title="2.1 线性法（通过基础矩阵）"></a>2.1 线性法（通过基础矩阵）</h3><p>步骤为：<br><img src="https://upload-images.jianshu.io/upload_images/5361608-6baddccdc7b64486.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>(1) <strong>计算基础矩阵F</strong></p><ul><li>使用投影变换H,使得：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-ca41e3160aebf191.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>那么对于，对应观察点：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-a068e0b2e384d123.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>其中，在叉乘中，</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-6245e42a46cbd158.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看出基础矩阵为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-37c11d1916365451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><strong>F: 使用八点算法计算</strong></li></ul><p>(3) <strong>使用F估计投影相机</strong></p><p>在得到基础矩阵后，<br>那么，可以得出两个观察点之间变换的参数b的计算方法：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-d056a708c90daee4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>最后，A矩阵的计算方法：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-c800177439cf3529.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>参数b的性质符合下面：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-57da4b0fb203a2a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>因此，b是一个极点！<br>那么最终得到的矩阵为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-d23d4cf324b53352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>(3) <strong>估计 3d点</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-7aa3144bd8758b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="3-python-实现"><a href="#3-python-实现" class="headerlink" title="3 python 实现"></a>3 python 实现</h2><h3 id="3-1-估计两幅图片的变换矩阵RT"><a href="#3-1-估计两幅图片的变换矩阵RT" class="headerlink" title="3.1 估计两幅图片的变换矩阵RT"></a>3.1 估计两幅图片的变换矩阵RT</h3><ul><li><p>通过 本质矩阵求 R,T</p></li><li><p>在标准相机和非标准相机中，存在：</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-581c6327efd6eaac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-0494233d51db29c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-47bdfea9649897c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-2b94f27a4cb512bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>因此可以通过分解本质矩阵来求得 R,T;</li></ul><p>计算过程为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-ca3aaeab50e1a5da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>【代码】</p><pre><code class="python">def estimate_initial_RT(E):    # SVD分解    u, s, vt = np.linalg.svd(E)    # 计算R    z = np.array([        [0, 1, 0],        [-1, 0, 0],        [0, 0, 0]    ])    w = np.array([        [0, -1, 0],        [1, 0, 0],        [0, 0, 1]    ])    M = u.dot(z).dot(u.T)    Q1 = u.dot(w).dot(vt)    R1 = np.linalg.det(Q1) * Q1    Q2 = u.dot(w.T).dot(vt)    R2 = np.linalg.det(Q2) * Q2    # 计算 T,T为u的第三列    T1 = u[:, 2].reshape(-1,1)    T2 = - T1    # R 有两种， T有两种，一共四中可能    R_set = [R1, R2]    T_set = [T1, T2]    RT_set = []    for i in range(len(R_set)):        for j in range(len(T_set)):            RT_set.append(np.hstack( (R_set[i], T_set[j]) ))    RT = np.zeros((4, 3, 4))    for i in range(RT.shape[0]):        RT[i, :, :] = RT_set[i]    return RT</code></pre><h3 id="3-2-不同图片中的对应点"><a href="#3-2-不同图片中的对应点" class="headerlink" title="3.2 不同图片中的对应点"></a>3.2 不同图片中的对应点</h3><p><img src="https://upload-images.jianshu.io/upload_images/5361608-34352a4e92bbf406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>对应3D点和图片上的点，存在上<code>p = MP&#39;</code>,在齐次坐标系下，得到上式；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-4f0424a16bb4daa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>因此，A矩阵为（）：</p><p><img src="https://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7D%20m_%7B1%7D-u_%7B1%7Dm_%7B3%7D%20%5C%5C%20m_%7B2%7D-v_%7B1%7Dm_%7B3%7D%5C%5C%20...%5C%5C%20m_1-u_%7Bn%7Dm_%7B3%7D%5C%5C%20m_%7B2%7D-v_%7Bn%7Dm_%7B3%7D%20%5Cend%7Bbmatrix%7D" alt=""></p><ul><li>这里， M是已知的，将 3D点P作为未知数；</li><li>使用svd分解；</li></ul><p>【代码】</p><pre><code class="python">def linear_estimate_3d_point(image_points, camera_matrices):    # 传入两个点， 两个相机矩阵    N = image_points.shape[0]   # N == 2    # 建立系数矩阵    A = np.zeros((2*N, 4))  # 每一点建立两个等式    A_set = []    for i in range(N):        pi = image_points[i]        Mi = camera_matrices[i]        x = pi[0] * Mi[2] - Mi[0]        y = pi[1] * Mi[2] - Mi[1]        A_set.append(x)        A_set.append(y)    for i in range(A.shape[0]):        A[i] = A_set[i]    u, s, vt = np.linalg.svd(A)    p = vt[-1]      # 取最后一列    p = p / p[-1]       # 齐次坐标，最后一个为1    p = p[:3]       # 取前三个，3D坐标    return p</code></pre><h3 id="3-3-优化：计算对应点的重投影误差"><a href="#3-3-优化：计算对应点的重投影误差" class="headerlink" title="3.3 优化：计算对应点的重投影误差"></a>3.3 优化：计算对应点的重投影误差</h3><ul><li>给一张图片i ,给定一个相机矩阵 Mi, 还有3D 的点P,得到：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-28a616f7ee46a342.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-a241e0b53d76f2d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>投影误差为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-c5c14c63438ac4bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>每个e都是(2 <em> 1)的向量，可以对e求导，有K个相机位置，那么雅克比矩阵为（ 2K </em> 3）：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-ca2844b513ce5a5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>本题提供一个真实3d点：</li><li>对一个点求导得：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-dea44473877e5b3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>一个投影点有(x,y)，得到两个等式，可得两个偏导数</li></ul><p>代码为：</p><pre><code class="python">def reprojection_error(point_3d, image_points, camera_matrices):    # 图像点的数量    3d点：1， 2d点： 2， 相机矩阵 2    N = image_points.shape[0]    # 建立其次坐标系    point_3d_homo = np.hstack((point_3d, 1))    error_set = []    # 计算误差    for i in range(N):        pi = image_points[i]        Mi = camera_matrices[i]        Yi = Mi.dot(point_3d_homo)  # 3d点的投影        pi_prime = 1.0 / Yi[2] * np.array([Yi[0], Yi[1]])       # 转变为2d点        error_i = pi_prime - pi        error_set.append(error_i[0])        # x 误差        error_set.append(error_i[1])        # y 误差    # 变换成 array    error = np.array(error_set)    return errordef jacobian(point_3d, camera_matrices):    # 一个 3D点， 2个相机矩阵    K = camera_matrices.shape[0]    J = np.zeros((2 * K, 3))        # 2*k, 3    #  齐次坐标系    point_3d_homo = np.hstack((point_3d, 1))    J_tmp = []    # 计算 雅克比矩阵    for i in range(K):        Mi = camera_matrices[i]        pi = Mi.dot(point_3d_homo)      # 投影点        Jix =(pi[2]*Mi[0] - pi[0] * Mi[2] ) / pi[2]**2      # x        Jiy =(pi[2]*Mi[1] - pi[1] * Mi[2]) / pi[2]**2       # y        J_tmp.append(Jix)        J_tmp.append(Jiy)    for i in range(J.shape[0]):        J[i] = J_tmp[i][:3]         # J_tmp 每一行包含齐次坐标，去掉最后一列    return J</code></pre><h3 id="3-4-高斯牛顿法"><a href="#3-4-高斯牛顿法" class="headerlink" title="3.4  高斯牛顿法"></a>3.4  高斯牛顿法</h3><ul><li>寻找一个近似最小化重投影误差；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-6c176df1512910f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>代码为：</p><pre><code class="python">def nonlinear_estimate_3d_point(image_points, camera_matrices):    # 计算初始估计的真实点    P = linear_estimate_3d_point(image_points, camera_matrices)    # 迭代10 次    for i in range(10):        e = reprojection_error(P, image_points, camera_matrices)        J = jacobian(P, camera_matrices)        P -= np.linalg.inv(J.T.dot(J)).dot(J.T).dot(e)    return P</code></pre><h3 id="3-5-估计-R-T"><a href="#3-5-估计-R-T" class="headerlink" title="3.5 估计 R, T"></a>3.5 估计 R, T</h3><ul><li>估计最有可能的R,T变换；</li><li>在第一个问题中，从本质矩阵中估计了4个 最有可能的RT矩阵，本次从中选择最优的一个；</li></ul><ol><li>首先， 对每一对R,T ， 计算3D点的对应位置；</li><li>正确的R,T从图片中估计的3D点拥有正向的深度值，即z值；</li><li>正向的值是相对于其相对的相机位置；所以，3d点先要变换到当前相机坐标系下；</li></ol><pre><code class="python">def estimate_RT_from_E(E, image_points, K):    # 获得四队RT    RT = estimate_initial_RT(E)    count = np.zeros((1, 4))        # 每一对的估计得分    I0 = np.array([[1.0, 0, 0, 0],                   [0, 1.0, 0, 0],                   [0, 0, 1.0, 0]])     # [I 0] 设第一个相机为初始位置    M1 = K.dot(I0)      # 第一个相机的变换矩阵    camera_matrices = np.zeros((2, 3, 4))       # 建立两个相机变换矩阵    camera_matrices[0] = M1    for i in range(RT.shape[0]):        # 对每一个RT进行测试        rt = RT[i]        M2_i = K.dot(rt)        camera_matrices[1] = M2_i       # 临时第二个相机变换矩阵        for j in range(image_points.shape[0]):      # 估计 3D点            point_j_3d = nonlinear_estimate_3d_point(image_points[j], camera_matrices)            pj_homo = np.vstack((point_j_3d.reshape(3, 1), [1]))      # 转换为齐次坐标            pj_prime = camera1tocamera2(pj_homo, rt)      # 将3d点变换到相对的相机坐标系下            if pj_homo[2] &gt; 0 and pj_prime[2] &gt; 0:                count[0, i] += 1     # 3D点面向相机 ，z值为正， 计算正确    maxIdx = np.argmax(count)    maxRT = RT[maxIdx]    return maxRTdef camera1tocamera2(P, RT):    P_homo = np.array([P[0], P[1], P[2], 1.0])    A = np.zeros((4, 4))    A[0:3, :] = RT    A[3, :] = np.array([0, 0, 0, 1.0])    P_prim_homo = A.dot(P_homo.T)    P_prim_homo /= P_prim_homo[3]    P_prime = P_prim_homo[0:3]    return P_prime</code></pre><h2 id="4-结果"><a href="#4-结果" class="headerlink" title="4. 结果"></a>4. 结果</h2><pre><code>Part A: Check your matrices against the example R,T--------------------------------------------------------------------------------Example RT: [[ 0.9736 -0.0988 -0.2056  0.9994] [ 0.1019  0.9948  0.0045 -0.0089] [ 0.2041 -0.0254  0.9786  0.0331]]Estimated RT: [[[ 0.98305251 -0.11787055 -0.14040758  0.99941228]  [-0.11925737 -0.99286228 -0.00147453 -0.00886961]  [-0.13923158  0.01819418 -0.99009269  0.03311219]] [[ 0.98305251 -0.11787055 -0.14040758 -0.99941228]  [-0.11925737 -0.99286228 -0.00147453  0.00886961]  [-0.13923158  0.01819418 -0.99009269 -0.03311219]] [[ 0.97364135 -0.09878708 -0.20558119  0.99941228]  [ 0.10189204  0.99478508  0.00454512 -0.00886961]  [ 0.2040601  -0.02537241  0.97862951  0.03311219]] [[ 0.97364135 -0.09878708 -0.20558119 -0.99941228]  [ 0.10189204  0.99478508  0.00454512  0.00886961]  [ 0.2040601  -0.02537241  0.97862951 -0.03311219]]]--------------------------------------------------------------------------------Part B: Check that the difference from expected point is near zero--------------------------------------------------------------------------------Difference:  0.0029243053036863698--------------------------------------------------------------------------------Part C: Check that the difference from expected error/Jacobian is near zero--------------------------------------------------------------------------------Error Difference:  8.301299988565727e-07Jacobian Difference:  1.817115702351657e-08--------------------------------------------------------------------------------Part D: Check that the reprojection error from nonlinear methodis lower than linear method--------------------------------------------------------------------------------Linear method error: 98.73542356894183Nonlinear method error: 95.59481784846034--------------------------------------------------------------------------------Part E: Check your matrix against the example R,T--------------------------------------------------------------------------------Example RT: [[ 0.9736 -0.0988 -0.2056  0.9994] [ 0.1019  0.9948  0.0045 -0.0089] [ 0.2041 -0.0254  0.9786  0.0331]]Estimated RT: [[ 0.97364135 -0.09878708 -0.20558119  0.99941228] [ 0.10189204  0.99478508  0.00454512 -0.00886961] [ 0.2040601  -0.02537241  0.97862951  0.03311219]]--------------------------------------------------------------------------------Part F: Run the entire SFM pipeline--------------------------------------------------------------------------------</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/5361608-cd68806911f3d3b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/06/29/CS231A-Homework-2-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>STL_2_空间分配器_2</title>
      <link>https://jingxa.github.io/2018/06/28/STL-2-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8-2/</link>
      <guid>https://jingxa.github.io/2018/06/28/STL-2-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8-2/</guid>
      <pubDate>Thu, 28 Jun 2018 12:59:31 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;本文章内容来源于《STL源码分析》第二章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;2-内存基本处理工具&quot;&gt;&lt;a href=&quot;#2-内存基本处理工具&quot; class=&quot;headerlink&quot; title=&quot;2 内存基本处理工具&quot;&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文章内容来源于《STL源码分析》第二章</p></blockquote><hr><h1 id="2-内存基本处理工具"><a href="#2-内存基本处理工具" class="headerlink" title="2 内存基本处理工具"></a>2 内存基本处理工具</h1><ul><li><p>STL有五个全局函数：作用于未初始化空间</p><ul><li>construct()</li><li>destroy()</li><li>uninitialized_copy() ==&gt;对应高层函数copy()</li><li>uninitialized_fill() ==&gt; fill()</li><li>uninitialized_fill_n() ==&gt; fill_n()</li></ul></li><li><p>后面三个低层次函数：</p></li><li>定义于<code>&lt;memory&gt;</code></li><li><p>SGI 定义于：<code>&lt;stl_uninitialized&gt;</code></p></li><li><p>POD： plain Old Data : 标量型别或者传统的 c struct 型别：如char, int等等；</p></li><li>POD: 此型别必然有用trivial ctor/dtor/ copy/ assignment函数。可以采用类似<code>memcpy</code>之类的高效率函数；</li><li><p>Non-POD: 采用最保险的做法；</p></li><li><p>__type_triats: 萃取型别的特性；</p><ul><li>如<code>typedef __type_traits&lt;T&gt;::is_POD_type is_POD</code> 判断T是否POD模型；</li><li>traits具体查看《STL源码分析》第三章;</li></ul></li></ul><h2 id="2-1-uninitialized-copy"><a href="#2-1-uninitialized-copy" class="headerlink" title="2.1 uninitialized_copy"></a>2.1 uninitialized_copy</h2><p><img src="https://upload-images.jianshu.io/upload_images/5361608-f7bb5f4e8c3c7791.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p>主要接口</p><pre><code class="c++">// uninitialized_copytemplate&lt;class InputIterator, class ForwardIterator&gt;ForwardIterator uninitialized_copy(InputIterator first, InputIterator last,  ForwardIterator result){      retun __uninitialized_copy(first,last, result, value_type(result));      // 利用value_type() 取出first de value_type  }</code></pre></li><li><p>POD判别函数</p><pre><code class="c++">// POD  判断template&lt;class InputIterator, class ForwardIterator, class T&gt;inline ForwardIterator__uninitialized_copy(InputIterator first, InputIterator last,       ForwardIterator result ,T*){          typedef typename __type_traits&lt;T&gt;::is_POD_type is_POD;          return __uninitialized_copy_aux(first, last, result, is_POD());}</code></pre></li><li><p>POD型别</p></li></ul><pre><code class="c++">template&lt;class InputIterator, class ForwardIterator, class T&gt;inline ForwardIterator__uninitialized_copy_aux(InputIterator first, InputIterator last,        ForwardIterator result, __true_type){            return copy(first, last, result);   // 调用STL算法 copy()        }    </code></pre><ul><li>non-POD型别</li></ul><pre><code class="c++">template&lt;class InputIterator, class ForwardIterator, class T&gt;inline ForwardIterator__uninitialized_copy_aux(InputIterator first, InputIterator last,        ForwardIterator result, __false_type){            ForwardIterator cur = result;            // 异常处理省略            for(;first != last; ++first, ++cur){                construct(&amp;*cur, *first);   // 必须一个一个元素构造            }            return cur;        }    </code></pre><ul><li>针对char*, wchar_t*的版本</li></ul><pre><code class="c++">inline char* uninitialized_copy(const char* first, const char* last, char* result){    memmove(result, first, last - first);    return result + (last - first);} inline wchar_t* uninitialized_copy(const wchar_t* first, const wchar_t* last,    wchar_t* result){    memmove(result, first, sizeof(wchar_t)*(last - first));    return result+(last - first);}</code></pre><h2 id="2-2-uninitialized-fill"><a href="#2-2-uninitialized-fill" class="headerlink" title="2.2 uninitialized_fill"></a>2.2 uninitialized_fill</h2><p><img src="https://upload-images.jianshu.io/upload_images/5361608-89af66f445096a72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>在i出调用construct(&amp;*i, x)</li></ul><pre><code class="c++">template&lt;class ForwardIterator, class T&gt;void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T&amp; x){    __uninitialized_fill(first, last, x, value_type(first));}</code></pre><ul><li>判断POD</li></ul><pre><code class="c++">template&lt;class ForwardIterator , class T, class T1&gt;inline void __uninitialized_fill(ForwardIterator first, ForwardIterator last,    const T&amp; x, T1*){        typedef typename __type_traits&lt;T&gt;::is_POD_type is_POD;        __uninitialized_fill_aux(first, last, x, is_POD());    }</code></pre><ul><li>POD型别</li></ul><pre><code class="c++">template&lt;class ForwardIterator , class T, class T1&gt;inline void __uninitialized_fill(ForwardIterator first, ForwardIterator last,    const T&amp; x, __true_type){        fill(first, last, x);  // 调用STL算法 fill()}</code></pre><ul><li>non-POD型别</li></ul><pre><code class="c++">template&lt;class ForwardIterator , class T, class T1&gt;inline void __uninitialized_fill(ForwardIterator first, ForwardIterator last,    const T&amp; x, __false_type){                    ForwardIterator cur = result;            // 异常处理省略            for(;first != last; ++first, ++cur){                construct(&amp;*cur, *first);   // 必须一个一个元素构造            }            return cur;}</code></pre><h2 id="2-3-uninitialized-fill-n"><a href="#2-3-uninitialized-fill-n" class="headerlink" title="2.3 uninitialized_fill_n"></a>2.3 uninitialized_fill_n</h2><p><img src="https://upload-images.jianshu.io/upload_images/5361608-9fd0facaaf195893.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><ol><li>首先使用萃取器取出first的value type,</li><li>然后判断型别是否为POD型别（plain old data）,即标量型别，或者传统的 c struct型别；</li><li>pod必然有用无用的trivial ctor/copy/dtor/assignment函数</li><li>对pod采用memcpy之类高效率的函数,non-pod采用保险的做法；</li></ol></blockquote><ul><li>接口</li></ul><pre><code class="c++">template&lt;class ForwardIterator , class Size, class T&gt;inline ForwardIterator uninitialized_fill_n(ForwardIterator first, Size n, const T&amp; x){    return __uninitialized_fill_n(first,n, x, value_type(first));}</code></pre><ul><li>POD型别判断</li></ul><pre><code class="c++">template &lt;class ForwardIterator , class Size, class T,class T1&gt;inline ForwardIterator __uninitialized_fill_n(ForwardIterator first,    Size n , const T&amp; x, T1*){        typedef typename __type_traits&lt;T1&gt;::is_POD_type is_POD;        return __uninitialized_fill_n_aux(first, n, x, is_POD());    }</code></pre><ul><li>POD 型别</li></ul><pre><code class="c++">template &lt;class ForwardIterator , class Size, class T&gt;inline ForwardIterator __uninitialized_fill_n_aux(ForwardIterator first,    Size n , const T&amp; x, __true_type){        return fill_n(first, n, x);  // 告诫函数执行    }</code></pre><ul><li>non-POD型别</li></ul><pre><code class="c++">template&lt;class ForwardIterator, class Size, class T&gt;inline ForwardIterator __uninitialized_fill_n_aux(ForwardIterator first,    Size n, const T&amp; x, __false_type){        ForwardIterator cur = first;        for(; n&gt;0; --n, ++cur){            construct(&amp;*cur, x);        }        return cur;    }</code></pre><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/06/28/STL-2-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>STL_4_容器_vector</title>
      <link>https://jingxa.github.io/2018/06/28/STL-4-%E5%AE%B9%E5%99%A8-vector/</link>
      <guid>https://jingxa.github.io/2018/06/28/STL-4-%E5%AE%B9%E5%99%A8-vector/</guid>
      <pubDate>Thu, 28 Jun 2018 12:58:49 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;本文章内容来源于《STL源码分析》第四章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;容器的分类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/536160
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文章内容来源于《STL源码分析》第四章</p></blockquote><hr><p>容器的分类：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-406c4fd15665c541.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="1-序列式容器"><a href="#1-序列式容器" class="headerlink" title="1 序列式容器"></a>1 序列式容器</h1><h2 id="1-vector"><a href="#1-vector" class="headerlink" title="1 vector"></a>1 vector</h2><ul><li>array: 静态空间 ，不能改变</li><li>vector: 动态空间</li><li><code>&lt;vector&gt;</code><br>SGI的实现：<code>&lt;stl_vector.h&gt;</code></li></ul><h3 id="1-1-迭代器和-数据结构"><a href="#1-1-迭代器和-数据结构" class="headerlink" title="1.1 迭代器和 数据结构"></a>1.1 迭代器和 数据结构</h3><pre><code class="C++">template&lt;class T, class Alloc = alloc&gt;class vector{public:    // vector的嵌套定义    typedef T                value_type;    typedef value_type*     pointer;    typedef value_type&amp;        reference;    typedef    value_type*        iterator;    typedef size_t             size_type;    typedef    ptrdiff_t        difference_type;protected:    // 以下，simple_alloc 是SGI STL的空间配置器；    typedef simple_alloc&lt;value_type, Alloc&gt; data_allocator;    iterator start;                // 表示空间使用的头    iterator finish;            // 表示空间使用的尾    iterator end_of_storage;     // 表示可用空间的尾部...};</code></pre><ul><li>可以看出： vector的指针是普通指针；</li><li>迭代器 <code>start</code>,<code>end</code>: 表示vector的连续空间中已被使用的范围；</li><li><code>end_of_storage</code>: 指向整块空间(包含未使用部分)的尾端；</li></ul><p>使用三个迭代器提供的vector的状态：</p><pre><code class="C++">    iterator begin(){return start;} // 开始位置    iterator end(){return finish;}    //    size_type size()const {return size_type(end() - begin());}  //使用大小    size_type capacity() const{  // 容量        return end_of_storage - begin();    }    bool empty() const{return begin() == end();}  // 空    reference operator[](size_type n){return *(begin() +n);}    reference front(){return *begin();}    reference back(){return *(end() -1);}</code></pre><h3 id="1-2-内存管理"><a href="#1-2-内存管理" class="headerlink" title="1.2 内存管理"></a>1.2 内存管理</h3><ul><li>vector 的构造： construct </li><li><p>内存： push_back</p></li><li><p>vector 使用<code>alloc</code>作为空间配置器，并且还定义了一个<code>data_allocator</code></p><pre><code>  // 以下，simple_alloc 是SGI STL的空间配置器；  typedef simple_alloc&lt;value_type, Alloc&gt; data_allocator;</code></pre></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-d5d1c167a7518acc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>(1) <strong>vector 的构造函数</strong></p><ul><li>vector使用很多构造器， </li></ul><pre><code class="C++">// 构造函数    vector(): start(0), finish(0), end_of_storage(0)(){}    vector(size_type n, const T&amp; value){fill_initialize(n, value);}    vector(int n , const T&amp; value){fill_initialize(n, value);}    vector(long n, const T&amp; value){fill_initialize(n ,value);}    explicit vector(size_type n){fill_initialize(n, T());}    ~vector(){        destroy(start, finish);  // 全局函数        deallocate();             // 成员函数    }protected:    // 填充并且初始化    void fill_initialize(size_type n, const T&amp; value){        start = allocate_and_fill(n, value);        finish = start + n;        end_of_storage = finish;    }    // 配置空间并填满内存    iterator allocate_and_fill(size_type n, const T&amp; x){        iterator result = data_allocator::allocate(n);  // 分配n个元素空间        uninitialized_fill_n(result, n, x);        return result;    }</code></pre><ul><li>空间操作</li></ul><pre><code class="C+++">public:    void resise(size_type new_size, const T&amp; x){        if(new_size &lt; size())            erase(begin()+new_size, end());        else{            insert(end(), new_size - size(), x);        }    }    void resise(size_type new_size){        resize(new_size, T());    }</code></pre><p>(2) <strong>vector插入元素</strong></p><pre><code class="C++">protected:    void insert_aux(iterator position, const T&amp; x);  // 插入public:    void push_back(const T&amp; x){        //还有剩余未使用空间        if(finish != end_of_storage){            construct(finish, x);            ++finish;        }else{    //空间不足            insert_aux(end(), x);        }    }</code></pre><pre><code class="C++">template&lt;class T, class Alloc&gt;void vector&lt;T,Alloc&gt;::insert_aux(iterator position, const T&amp; x){    if(finish != end_of_storage){ // 还有备用空间        // 在备用空间起始处构造一个函数,并且以vector最后一个元素作为初始值        construct(finish, *(finish -1));          ++finish;        T x_copy  = x;        copy_backward(position, finish-2, finish-1); // 往后复制        *position = x_copy;    }else{   // 已无备用空间        const size_type old_size = size();        const size_type len = old_size !=0 ? 2* old_size: 1;        // r如果原大小为0，配置一个元素大小；        // 如果原大小不为0， 新配置空间为原来2倍        // 前半段用来存放原始数据，后半段放新数据        iterator new_start = data_allocator::allocate(new_size);        iterator new_finish = new_start;        try{            // 将原来postion之前内容拷贝到新空间            new_finish = uninitialized_copy(start,position, new_start);            //为新元素赋值x            construct(new_finish, x);            ++new_finish;            // position之后半部分拷贝过来            new_finish = uninitialized_copy(position,finish, new_finish);        }catch(...){            // commit or rollback            destroy(new_start, new_finish);            data_allocator::deallocate(new_start,len);            throw;        }        //析构并释放原来空间        destroy(begin(), end());        deallocate();        //调整迭代器，指向新vector        start= new_start;        finish = new_finish;        end_of_storage = new_start+ len;    }}</code></pre><p>(3) <strong>vector删除元素</strong></p><ul><li>pop_back()</li><li>erase(p)</li><li>erase(first, last)</li><li>clear()</li></ul><pre><code class="C+++">public：    void pop_back(){  //释放对象，内存保留        --finish;        destroy(finish);    }    // 清除某个位置上的元素    iterator erase(iterator position){        if(postion + 1 != end()){            copy(position +1,finish, position );  // 后续元素往前移动            --finish;            destroy(finish);            return position;        }    }    // 清除某个区间上的元素    iterator erase(iterator first, iterator last){        iterator i = copy(last, finish, first);  // copy 全局函数        destroy(i, finish);        finish = finish - (last - first);        return first;    }    void clear(){return erase(begin(), end());}</code></pre><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/06/28/STL-4-%E5%AE%B9%E5%99%A8-vector/#disqus_thread</comments>
    </item>
    
    <item>
      <title>char*的疑问</title>
      <link>https://jingxa.github.io/2018/06/27/char-%E7%9A%84%E7%96%91%E9%97%AE/</link>
      <guid>https://jingxa.github.io/2018/06/27/char-%E7%9A%84%E7%96%91%E9%97%AE/</guid>
      <pubDate>Wed, 27 Jun 2018 11:15:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;在使用char* 传递参数的时候，以为char* 传递的是指针；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;C++&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include&amp;lt;string&amp;gt;
#include &amp;lt;cstring&amp;gt;
#in
        
      
      </description>
      
      <content:encoded><![CDATA[<p>在使用char* 传递参数的时候，以为char* 传递的是指针；</p><pre><code class="C++">#include &lt;iostream&gt;#include&lt;string&gt;#include &lt;cstring&gt;#include&lt;vector&gt;using namespace std;void printNoref(char * s){    cout&lt;&lt;&quot;非引用传值函数中s 地址:&quot;&lt;&lt;&amp;s&lt;&lt;endl;    cout&lt;&lt;&quot;s 指向的地址:&quot;&lt;&lt;(int*)s&lt;&lt;endl;    s++;    cout&lt;&lt;&quot;str:&quot;&lt;&lt;s&lt;&lt;endl;}void printref(char *&amp; s){    cout&lt;&lt;&quot;非引用传值函数中s 地址:&quot;&lt;&lt;&amp;s&lt;&lt;endl;    cout&lt;&lt;&quot;s 指向的地址:&quot;&lt;&lt;(int*)s&lt;&lt;endl;    (s)++;    cout&lt;&lt;&quot;ref str:&quot;&lt;&lt;s&lt;&lt;endl;}int main() {    string s ( &quot;123456789&quot;);    char* str = new char[s.size() + 1];    strcpy(str, s.c_str());    // 真实地址    cout&lt;&lt;&quot;真实 str 地址：&quot;&lt;&lt;&amp;str&lt;&lt;endl;    cout&lt;&lt;&quot;str 指向的地址：&quot;&lt;&lt;(int*)str&lt;&lt;endl;      //非引用传值    printNoref(str);    cout&lt;&lt;&quot;str 指向的地址:&quot;&lt;&lt;(int*)str&lt;&lt;&quot; 值 str:&quot;&lt;&lt;str&lt;&lt;endl;    cout&lt;&lt;&quot;================&quot;&lt;&lt;endl;    // 引用传值    printref(str);    cout&lt;&lt;&quot;str 指向的地址:&quot;&lt;&lt;(int*)str&lt;&lt;&quot; 值 str:&quot;&lt;&lt;str&lt;&lt;endl;    return 0;}</code></pre><p>结果：</p><pre><code>真实 str 地址：0x7ffcf092ee08str 指向的地址：0x1481c20非引用传值函数中s 地址:0x7ffcf092ede8s 指向的地址:0x1481c20str:23456789str 指向的地址:0x1481c20 值 str:123456789================引用传值函数中s 地址:0x7ffcf092ee08s 指向的地址:0x1481c20ref str:23456789str 指向的地址:0x1481c21 值 str:23456789</code></pre><ul><li><code>char * s</code>传递的是s地址中存储的指针地址的复制，</li><li><code>char*&amp; s</code>传递的是指向s真实地址的指针；</li></ul><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/06/27/char-%E7%9A%84%E7%96%91%E9%97%AE/#disqus_thread</comments>
    </item>
    
    <item>
      <title>STL_1—_空间分配器</title>
      <link>https://jingxa.github.io/2018/06/26/STL-1%E2%80%94-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8/</link>
      <guid>https://jingxa.github.io/2018/06/26/STL-1%E2%80%94-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8/</guid>
      <pubDate>Tue, 26 Jun 2018 12:56:17 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;本文章内容来源于《STL源码分析》第二章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1-STL-allocater&quot;&gt;&lt;a href=&quot;#1-STL-allocater&quot; class=&quot;headerlink&quot; title=&quot;1.
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文章内容来源于《STL源码分析》第二章</p></blockquote><hr><h1 id="1-STL-allocater"><a href="#1-STL-allocater" class="headerlink" title="1. STL allocater"></a>1. STL allocater</h1><h2 id="1-1-操作过程"><a href="#1-1-操作过程" class="headerlink" title="1.1 操作过程"></a>1.1 操作过程</h2><ul><li>对象创建<ul><li>内存分配： alloc:allocate()</li><li>对象构造： ::construct()</li></ul></li><li>对象释放<ul><li>对象析构： ::destroy()</li><li>内存释放：  alloc:deallocate()</li></ul></li></ul><h2 id="1-2-定义"><a href="#1-2-定义" class="headerlink" title="1.2 定义"></a>1.2 定义</h2><ul><li><code>&lt;memory&gt;</code><br>包含以下两个头文件：<pre><code class="C++">#include &lt;stl_alloc.h&gt;  //负责内存配置和释放#include &lt;stl_construct.h&gt;  //负责对象构造和析构</code></pre></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-e5370350f3ee4f1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="1-3-构造和析构"><a href="#1-3-构造和析构" class="headerlink" title="1.3 构造和析构"></a>1.3 构造和析构</h2><ul><li>construct()</li><li>destroy()</li></ul><p>部分代码：</p><pre><code class="C++"># include &lt;new.h&gt;  //使用placement new template&lt;class T1, class T2&gt;inline void construct(T1* p, T2&amp; value){  new(p) T1(value);  // placement new ; 调用T1::T1(value);在p指向的内存上构造}template&lt;class T&gt;inline void destroy(T&amp; pointer){  pointer-&gt;~T();  //调用析构 ~T()}//destroy 的其他版本 ···</code></pre><h2 id="1-4-空间的配置和释放：std-alloc"><a href="#1-4-空间的配置和释放：std-alloc" class="headerlink" title="1.4 空间的配置和释放：std::alloc"></a>1.4 空间的配置和释放：std::alloc</h2><h3 id="1-4-1-分类"><a href="#1-4-1-分类" class="headerlink" title="1.4.1 分类"></a>1.4.1 分类</h3><ul><li>malloc()</li><li>free()</li><li>内存破碎问题：<ul><li>第一级配置器： 直接使用malloc()和free()</li><li>第二级配置器： <ul><li>(1) 配置区块大于128bytes，使用第一级配置器；</li><li>(2) 小于128bytes，视区块过小，使用memory pool 即内存池</li></ul></li></ul></li></ul><p>定义：<br>第一级配置器： <code>_malloc_alloc_template</code><br>第二级配置器：<code>_default_alloc_template</code></p><ul><li>alloc不接受任何template参数；</li></ul><h3 id="1-4-2-接口"><a href="#1-4-2-接口" class="headerlink" title="1.4.2 接口"></a>1.4.2 接口</h3><ul><li>为了符合stl规范，包装一个接口；</li></ul><pre><code class="C++">template&lt;class T， class Alloc&gt;class simple_aaloc{public:    static T* allocate(size_t n){        return 0 == n ? 0 : (T*)Alloc::allocate(n*sizeof(T));    }    static T* allocate(void){        return (T*) Alloc::allocate(sizeof(T));    }    static void deallocate(T* p, size_t n){        if(0 != n)Alloc::deallocate(p, n*sizeof(T));    }    static void deallocate(T* p){        Alloc::deallocate(p, sizeof(T));    }};</code></pre><h3 id="1-4-3-实际使用"><a href="#1-4-3-实际使用" class="headerlink" title="1.4.3  实际使用"></a>1.4.3  实际使用</h3><p><img src="https://upload-images.jianshu.io/upload_images/5361608-966b28c00474dcf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-a95bf56b52f422fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="1-4-5-第一级配置器-malloc-alloc-template"><a href="#1-4-5-第一级配置器-malloc-alloc-template" class="headerlink" title="1.4.5 第一级配置器 __malloc_alloc_template"></a>1.4.5 第一级配置器 <code>__malloc_alloc_template</code></h3><p>第一级配置器直接使用<code>malloc</code>和·free·</p><pre><code class="C++">template&lt;int inst&gt;  // 无template参数，“非型别参数”inst没用class __malloc_alloc_template{private:// 处理内存不足的函数指针//  oom: out of memory    static void *oom_malloc(size_t);    static void *oom_realloc(void*, size_t);    static void (*__malloc_alloc_oom_handler)();public://    分配内存    static void * allocate(){        void* result = malloc(n);     // 直接使用malloc        if(0 == result)result = oom_malloc(n); // 如果分配不成功，改用oom_malloc()        return result;    }// 释放内存    static void* deallocate(void* p , size_t /*n*/){        free(p);        //直接使用free    }//... 省略};</code></pre><h3 id="1-4-6-第二级配置器-default-alloc-template"><a href="#1-4-6-第二级配置器-default-alloc-template" class="headerlink" title="1.4.6 第二级配置器__default_alloc_template"></a>1.4.6 第二级配置器<code>__default_alloc_template</code></h3><p>(1) <strong>定义</strong></p><ul><li><p>如果区块：</p><ul><li>大于128bytes： 交给第一级配置器处理</li><li>小于128bytes: 使用内存池（memory pool）管理</li></ul></li><li><p>内存池管理（次层配置）：</p><ul><li>每次配置一大块内存，维护对应的自由链表(free-list)，然后从链表中划分内存给请求，或者回收小块内存；</li><li>内存池维护16个free-lists：各自管理(8, 16,24,32, …, 120 ,128)的小额区块；</li></ul></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-62692f7adc03ce2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre><code class="C++">/**    第二配置器的部分代码*/enum{__ALIGN = 8};   // 小型区块的上调边界  ，分配内存不足8的补齐8enum {__MAX_BYTES = 128};        //小型区块的上限enum {__NFREELISTS = __MAX_BYTES / __ALIGN};  // free-liststemplate&lt;bool threads, in inst&gt;  // 第一参数 多线程， 第二参数 无用class __default_alloc_template{private:// round_up() 将byte上调至8的倍数static size_t ROUND_UP(size_t bytes){    return (((bytes) + __ALIGN -1) &amp; ~(__ALIGN -1));}private:    union obj{        // free-lists 的节点构造        union obj * free_list_link;        char client_data[1];      };private:    static obj* vaolatile free_list[__NFREELISTS];   // 16个列表    static size_t FREELIST_INDEX(size_t bytes){        return (((bytes) + __ALIGN -1) / __ALIGN - );    }    static void* refill(size_t n);    // 返回一个大小为n的对象，可能加入大小为n的其他区块到free list    static char* chunk_alloc(size_t size, int &amp; nobjs);        //配置一大块内存，容纳nojbs个“size”的区块// static data membersstatic char* start_free;  // 内存池起始位置static char* end_free;static size_t heap_size;// 成员函数// 省略public:    static void* allocate(size_t n){  // n 大于0/* 后详*/}    static void deallocate(void* p , size_t n){/*后详*/};    static void* reallocate(void* p, size_t old_size, size_t new_size);};// 静态变量的初始化 // 省略</code></pre><p>(2) <strong>配置器函数allocate</strong></p><ul><li>第二级配置器分配内存的过程：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-5f57f1d1a29d7128.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre><code class="C++">    static void* allocate(size_t n){  // n 大于0        obj* volatile * my_free_list;        obj* result;        // 大于128bytes        if(n &gt; (size_t)__MAX_BYTES){            return (malloc_alloc::allocate(n));        }        // 寻找16个free_list中的一个        my_free_list = free_list + FREELIST_INDEX(n);        result = *my_free_list;        if(0 == result){            // 没有可用的free_list,准备填充free list            void* r = refill(ROUND_UP(n));            return r;        }        // 调整free list        * my_free_list = result-&gt;free_list_link;  // 将result指向的区块移除，my_free_list 指向result的后续        return result;    }</code></pre><p>(3) <strong>配置器函数deallocate()</strong></p><ul><li>同样，如果区块大于128bytes调用第一级配置器；</li><li>小于128bytes就找到相应的free list ，并将区块收回；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-db5f494e259f11b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre><code class="C++">    static void deallocate(void* p , size_t n){        obj* q = (obj*)p;        obj* volatile * my_free_list;        //大于128bytes 调用第一级配置器        if(n&gt;(size_t)__MAX_BYTES)        {            malloc::deallocate(p, n);            return;        }        // 寻找对应的free list        my_free_list = free_list + FREELIST_INDEX(n);        q-&gt;free_list_link = *my_free_list;        *my_free_list = q;    }</code></pre><p>(4)  <strong>重新填充 free lists</strong></p><ul><li>free list中没有可用区块的时候，调用<code>refill()</code>，为free list填充空间，新的空间取自内存池(chunk_alloc()完成)，缺省取得20个新节点，如果内存池不足，可能小于20个；<br><code>`</code>C++</li></ul><p>template<bool threads,="" int="" inst=""><br>void<em> __default_alloc_template&lt;threads, inst&gt;::refill(size_t n){<br>    int nobjs = 20;<br>    // 调用chunk_alloc()，nobjs 是引用传值<br>    char</em> chunk = chunk_alloc(n, nobjs);  </bool></p><pre><code>obj* volatile * my_free_list;obj* result;obj* current_obj, * next_obj;int i;// 如果只获得一个区块，直接分给调用者，free list 无新节点if(1 == nobjs )retun (chunk);//否则准备调整free list , 接入新节点my_free_list = free_list + FREELIST_INDEX(n);// 以下在chunk空间建立free list result = (obj*) chunk;  // 这一块返回客户端//导引free list 指向新配置的空间*my_free_list = next_obj = (obj*) (chunk+n);// 从1开始，第o个返回给客端for（int i= 1;; i++){    current_obj = next_obj;    next_obj = (obj*)((char*)next_obj + n); //分块    if(nobjs -1 == i){   // 最后一块        current_obj-&gt;free_list_link =0;        break;    }else{        current_obj -&gt;free_list_link = next_obj;    }}return result;</code></pre><p>}</p><pre><code>(5) **内存池(memory pool)**- 当free list中区块不够的时候，需要从内存池中取得新的区块；- `chunk_alloc()`完成这项任务：```C++// chunk_alloctemplate&lt;bool threads, in inst&gt;char* __default_alloc_template&lt;threads, inst&gt;::chunk_alloc(size_t size, int&amp; nobjs){    char* result;    size_t total_bytes = size * nobjs;    size_t bytes_left = end_free - start_free;  // 内存池剩余空间    if(bytes_left &gt;= total_bytes){        result = start_free;        start_free += total_bytes;        return result;    }else if(bytes_left &gt;=size){        // 剩余空间不能满足所有需求量，但足够供应一个以上的区块        nobjs = bytes_left / size;        total_bytes = size * nobjs;        result = start_free;        start_free += total_bytes;        return result;    }else{        //内存池剩余空间不能满足一个区块        size_t bytes_to_get = 2 * total_bytes + ROUND_UP(heap_size &gt;&gt; 4);        if(bytes_left &gt; 0){            //内存池还有零头，线分配给free list            //首先寻找合适的free list            obj* volatile* my_free_list = free_list +                 FREELIST_INDEX(bytes_left);            // 调整free list, 将内存中的残余空间编入            ((obj*)start_free)-&gt;free_list_link = *my_free_list;            *my_free_list = (obj*)start_free;        }        // 配置heap空间，用来补充内存池        start_free = (char*)malloc(bytes_to_get);        if(0 == start_free){            // heap 空间不足， malloc失败            int i;            obj* volatile* my_free_list,*p;            // 搜索适当的free list: 指的是“尚有未用完，而且区块够大”的free list            for(i = size;i&lt;__MAX_BYTES; i+=__ALIGN){                my_free_list = free_list + FREELIST_INDEX(i);                p = *my_free_list;                if(0 != p){ // free_list 有未用完区块                    *my_free_list = p-&gt;free_list_link;                    start_free = (char*)p;                    end_free = start_free +i;                    //递归调用自己，为了修正nobjs                    return chunk_alloc(size, nobjs);                    // 注意： 任何残零头部都被编入到free-list 中备用                }            }            end_free =0; // 如果出现意外，没有任何内存可用            // 调用第一级配置器，看看是oom否有用            start_free = (char*)malloc_alloc:allocate(bytes_to_get);            // 这会导致异常，或者存不足的情况获得改善        }        heap_size += bytes_to_get;        end_free = start_free + bytes_to_get；        //递归调用自己， 为了修正nobjs        return chunk_alloc(size, nobjs);    }    }</code></pre><ul><li><code>chunk_alloc()</code>通过<code>end_free - start_free</code>判断内存池的状态；</li><li>如果内存池剩余充分， 直接调出20个区块返回；</li><li>如果不够20个区块，返回世界能够供应的区块；</li><li>如果一个都不够，通过malloc() 从heap中配置内存– 新内存块为需求量的2倍，再加上一个随着配置次数越来越大的附加量；</li></ul><p>例子：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-dd0ce8eb28e51e1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/06/26/STL-1%E2%80%94-%E7%A9%BA%E9%97%B4%E5%88%86%E9%85%8D%E5%99%A8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
