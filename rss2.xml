<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jingxa&#39;s Blog</title>
    <link>https://jingxa.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>单影无人相依偎！</description>
    <pubDate>Wed, 04 Jul 2018 08:55:08 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>STL_容器_deque_2</title>
      <link>https://jingxa.github.io/2018/07/04/STL-%E5%AE%B9%E5%99%A8-deque-2/</link>
      <guid>https://jingxa.github.io/2018/07/04/STL-%E5%AE%B9%E5%99%A8-deque-2/</guid>
      <pubDate>Wed, 04 Jul 2018 08:54:21 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;本文章内容来源于《STL源码分析》第四章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;3-4-deque的元素操作&quot;&gt;&lt;a href=&quot;#3-4-deque的元素操作&quot; class=&quot;headerlink&quot; title=&quot;3.4 
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文章内容来源于《STL源码分析》第四章</p></blockquote><hr><h2 id="3-4-deque的元素操作"><a href="#3-4-deque的元素操作" class="headerlink" title="3.4 deque的元素操作"></a>3.4 deque的元素操作</h2><h3 id="3-4-1-deque的前和尾部删除"><a href="#3-4-1-deque的前和尾部删除" class="headerlink" title="3.4.1 deque的前和尾部删除"></a>3.4.1 deque的前和尾部删除</h3><ul><li>pop_back()</li><li>pop_front()</li></ul><pre><code>    // pop     void pop_back(){        if(finish.cur != finish.start){ // 最后缓冲区还有一个以上的元素            -- finish.cur;  // 调整指针；            destroy(finish.cur);// 最后元素析构        }else{             // 最后缓冲区没有元素            pop_back_aux(); //  释放缓冲区        }    }    void pop_front(){        if(start.cur != start.last -1){// 第一缓冲区还有多个元素            destroy(start.cur);            ++ start.cur;        }else{  // 第一缓冲区只有一个元素            pop_front_aux();  // 释放缓冲区        }    }</code></pre><p>这两个函数依然是借助了辅助函数：</p><pre><code>    // pop_back_aux    void pop_back_aux(){        deallocate_node(finish.first); // 释放最后一个缓冲区        finish.set_node(finish.node -1); // 调整finish的指向        finish.cur = finish.last -1;        destroy(finish.cur);   // 析构该元素    }    //pop_front_aux    void pop_front_aux(){        destroy(start.first);  // 第一缓冲区第一个元素析构        deallocate_node(start.first) ;  // 释放第一缓冲区        start.set_node(start.node + 1);        start.cur = start.first;  // 下一个缓冲区第一个元素    }</code></pre><ul><li>在删除元素的时候，也要考虑缓冲区的释放</li></ul><h3 id="3-4-2-clear"><a href="#3-4-2-clear" class="headerlink" title="3.4.2 clear()"></a>3.4.2 clear()</h3><pre><code>// 清除deque，保留一个缓冲区    void clear(){        // 针对头和尾部中间的缓冲区，都是饱满的        for(map_pointer node = start.node +1; node&lt;finish.node ; ++node){            // 析构所有元素            destroy(*node, *node+buffer_size());            // 释放缓冲区            data_allocator::deallocate(*node,buffer_size());        }        if(start.node !=finish.node){  // 还有头和尾部两个缓冲区            destroy(start.cur, start.last);   // 将头部缓冲区所有元素析构            destroy(finish.first, finish.cur); // 尾部缓冲区析构            // 释放掉尾部缓冲区，头部缓冲区保留            data_allocator::deallocate(finish.start, buffer_size());        }else{  // 只有一个缓冲区            destroy(start.cur, finish.cur); // 所有元素析构            finish = start; // 调整状态        }    }</code></pre><h3 id="3-4-3-erase"><a href="#3-4-3-erase" class="headerlink" title="3.4.3 erase"></a>3.4.3 erase</h3><pre><code>    // erase 操作    iterator erase(iterator pos){        iterator next = pos;        ++next;        difference_type index = pos - next;  // 清除点之前的元素个数        if(index &lt;(size() &gt;&gt;1 )){            copy_backward(start,pos, next); // 移动清除之前的元素            pop_front();  // 消除最前的一个元素        }else{            copy(next, finish, pos);  // 移动清除之后的元素            pop_back();        }        return start+ index;    }    // erase  [first, last)    void erase(iterator first, iterator last){        if(first == start &amp;&amp; last == finish){  // 如果是清除整个deque            clear();            return finish;        }else{            difference_type n = last - first;            difference_type elems_before = first - start;  // 清除区间前方的元素个数            if(elems_before &lt; (size() -n) /2){ // 前方元素比较少                copy_backward(start, first, last);                iterator new_start = start +n;   // 新起点                destroy(start, new_start);       // 移动完毕，冗余元素析构                for(map_pointer cur = start.node; cur&lt;new_start.node; ++cur){                    data_allocator::deallocate(*cur, buffer_size());                }                start = new_start; // 设定deque的新起点            }else{                copy(last,finish, first);  // 向前移动后方元素                iterator new_finish = finish - n;                 destroy(new_finish , finish);   // 移动完成冗余析构                for(map_pointer cur = new_finish.node +1;cur &lt;=finish.node; ++cur){                    data_allocator::deallocate(*cur, buffer_size());                }                finish = new_finish ; // deque 新尾部            }            return start + elems_before;        }    }</code></pre><h1 id="4-迭代器的操作"><a href="#4-迭代器的操作" class="headerlink" title="4 迭代器的操作"></a>4 迭代器的操作</h1><pre><code>/**    deque 的迭代器*/template&lt;class T, class Ref, class Ptr, size_t BufSiz&gt;struct __deque_iterator{    typedef __deque_iterator&lt;T, T&amp;,T*, BufSiz&gt;                iterator;    typedef    __deque_iterator&lt;T, const T&amp;, const T*, BufSiz&gt; const_iterator;    static    size_t buffer_size() {return __deque_buf_size(BufSiz, sizeof(T));}    // 未继承std::iterator, 必须自行添加iterator_category    typedef random_access_iterator_tag              iterator_category;    typedef T                                        value_type;    typedef Ptr                                        pointer;    typedef    Ref                                        reference;    typedef    size_t                                    size_type;    typedef    ptrdiff_t                                difference_type;    typedef T**                                        map_pointer;    typedef    __deque_iterator                        self;    // 保持与容器的联结    T*    cur;  // 迭代器指向缓冲区的current 元素    T*  first;    // 指向缓冲区的头；    T*  last;     // 指向缓冲区的尾巴（含备用空间）    map_pointer node;   // 指向管理中心public:    void set_node(map_pointer new_node){        node = new_node;        first =*new_node;    // 缓冲区开头        last = first + difference_type(buffer_size());    }    // 运算符重载    reference operator*() const{return *cur;}    pointer operator-&gt;() const{return &amp;(operator*());}    difference_type operator-(const self&amp; x) const{        return difference_type(buffer_size()) * (node - x.node -1) +             (cur - first) + ( x.last - x.cur);    }    self&amp; operator++(){        ++cur;        if(cur == last){ // 到达尾部， 切换到下一节点            set_node(node+1);            cur = first;        }        return *this;    }    self operator++(int){        self tmp  = *this;        ++*this;        return tmp;    }    self operator--(){        if(cur == first){            set_node(node -1);            cur = last;        }        -- cur;        return *this;    }    self operator--(int){        self tmp = *this;        -- *this;        return tmp;    }    // 随机存取    self&amp; operator+= (difference_type n){        difference_type offset = n +(cur - first);        //  first&lt; cur -n &lt;= offset &lt;= cur +n &lt; last         // 目标位置在同一缓冲区        if(offset &gt;= &amp;&amp; offset &lt; difference_type(buffer_size())){             cur += n;        }else{        // 目标的位置不在同一缓冲区            difference_type node_offset =                 offset &gt; 0 ? offset / difference_type(buffer_size())                    : difference_type((-offset - 1) / buffer_size()) -1;            // 切换到正确的节点            set_node(node + node_offset);            // 切换到正确的元素            cur = first + (offset - node_offset * difference_type(buffer_size()))        }        return *this;    }    self operator+(difference_type n) const{        self  tmp = *this;        return tmp += n;    }    self&amp; operator -=(difference_type n){        return *this += -n;    }    self operator-(difference_type n ){        self tmp = *this;        return tmp -= n;    }    // 随机存取[]    reference operator[] (difference_type n) const {        return *(*this + n);    }    bool operator== (const self&amp; x)const{        return cur == x.cur;    }    bool operator!=(const self&amp; x)const{        return !(*this == x);    }    boll operator&lt;(const self&amp; x)const{        return (node == x.node) ? (cur &lt; x.cur) :(node &lt; x.node);    }};</code></pre><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/07/04/STL-%E5%AE%B9%E5%99%A8-deque-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>STL_容器_deque_1</title>
      <link>https://jingxa.github.io/2018/07/04/STL-%E5%AE%B9%E5%99%A8-deque-1/</link>
      <guid>https://jingxa.github.io/2018/07/04/STL-%E5%AE%B9%E5%99%A8-deque-1/</guid>
      <pubDate>Wed, 04 Jul 2018 08:54:10 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;本文章内容来源于《STL源码分析》第四章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1 概述&lt;/h1&gt;&lt;p&gt;&lt;i
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文章内容来源于《STL源码分析》第四章</p></blockquote><hr><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><p><img src="https://upload-images.jianshu.io/upload_images/5361608-aae0b52efc3e2986.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p>deque 和vector的差异：</p><ul><li>deque 允许常数时间的插入或删除</li><li>deque 没有所谓的容量(capacity)概念</li></ul></li><li><p>deque是有分段的连续空间组合而成；</p></li><li><p>vector的空间不足再分配情况在deque上面是不会发生的；</p></li><li><p>deque的排序： 现将deque复制到vector，在vector排序后在复制到deque;</p></li></ul><h1 id="2-deque-的组成"><a href="#2-deque-的组成" class="headerlink" title="2 deque 的组成"></a>2 deque 的组成</h1><ul><li>deque有分段的连续空间组成；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-083527a9d98f0b4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="2-1-deque的中控"><a href="#2-1-deque的中控" class="headerlink" title="2.1 deque的中控"></a>2.1 deque的中控</h1><ul><li>采用一块map作为主控，其中map是一块连续空间，每个元素(此处称为节点,node)都是指针，指向分段的连续空间，称为缓冲区</li><li>缓冲区才是存储空间主题，默认值0 表示使用512bytes缓冲区；</li></ul><pre><code>template&lt;class T, class Alloc = alloc, size_t BufSiz = 0&gt;class deque{    public:    typedef T                         value_type;    typedef value_type*             pointer;    typedef size_t                    size_type;protected:    // 元素的指针的指针    typedef pointer*                 map_pointer;public:    typedef __deque_iterator&lt;T, T&amp;,T*,BufSiz&gt; iterator;protected:    //  data  member    iterator     start;    // 表示第一个节点    iterator    finish;   // 表示最后一个节点    map_pointer map;    // 指向map, map是连续空间，每个元素是指针，指向一块缓冲区    size_type map_size;    // map空间大小...</code></pre><h2 id="2-2-deque-的迭代器"><a href="#2-2-deque-的迭代器" class="headerlink" title="2.2 deque 的迭代器"></a>2.2 deque 的迭代器</h2><ul><li>deque的迭代器提供了4个成员<blockquote><p>T<em>    cur;  // 迭代器指向缓冲区的current 元素<br>  T</em>  first;    // 当前指向的缓冲区的头；<br>  T*  last;     // 当前指向的缓冲区的尾巴（含备用空间）<br>  map_pointer node;   // 指向管理中心的node</p></blockquote></li></ul><pre><code>template&lt;class T, class Ref, class Ptr, size_t BufSiz&gt;struct __deque_iterator{    typedef __deque_iterator&lt;T, T&amp;,T*, BufSiz&gt;                iterator;    typedef    __deque_iterator&lt;T, const T&amp;, const T*, BufSiz&gt; const_iterator;    static    size_t buffer_size() {return __deque_buf_size(BufSiz, sizeof(T));}    // 未继承std::iterator, 必须自行添加iterator_category    typedef random_access_iterator_tag              iterator_category;    typedef T                                        value_type;    typedef Ptr                                        pointer;    typedef    Ref                                        reference;    typedef    size_t                                    size_type;    typedef    ptrdiff_t                                difference_type;    typedef T**                                        map_pointer;    typedef    __deque_iterator                        self;    // 保持与容器的联结    T*    cur;  // 迭代器指向缓冲区的current 元素    T*  first;    // 指向缓冲区的头；    T*  last;     // 指向缓冲区的尾巴（含备用空间）    map_pointer node;   // 指向管理中心...</code></pre><p>其中 <code>buffer_size()</code> 中调用全局函数：</p><pre><code>/**     全局函数  __deque_buf_size    1. 如果n 不为0， 传回n， bcui buffer size 有用户自定义    2. 如果n 为0， 表示buffer size 使用默认值        - 如果sz（元素大小，sizeof(value_type)）小于512， 传回512/sz        - 如果sz 不小于 512 ， 传回1*/inline  size_t  __deque_buf_size(size_t n, size_t sz){    return n!=0 ? n : (sz &lt; 512 ? size_t(512/sz) : size_t(1));}</code></pre><h2 id="2-3-deque的数据结构"><a href="#2-3-deque的数据结构" class="headerlink" title="2.3 deque的数据结构"></a>2.3 deque的数据结构</h2><ul><li>deque维护了一个map</li><li>还有start,finish 两个迭代器，指向第一个缓冲区的第一个元素和最后一个缓冲区的最后一个元素的下一个位置；</li><li>如果map空间不足，就重新分配更大的map;</li></ul><pre><code>template&lt;class T, class Alloc = alloc, size_t BufSiz = 0&gt;class deque{    public:    typedef T                         value_type;    typedef value_type*             pointer;    typedef size_t                    size_type;protected:    // 元素的指针的指针    typedef pointer*                 map_pointer;public:    typedef __deque_iterator&lt;T, T&amp;,T*,BufSiz&gt; iterator;protected:    //  data  member    iterator     start;    // 表示第一个节点    iterator    finish;   // 表示最后一个节点    map_pointer map;    // 指向map, map是连续空间，每个元素是指针，指向一块缓冲区    size_type map_size;    // map空间大小protected:    // 专属空间配置器  ,每次配置一个元素大小    typedef simple_alloc&lt;value_type, Alloc&gt; data_allocator;    // 每次配置一个指针大小    typedef simple_alloc&lt;pointer, Alloc&gt; map_allocator;...</code></pre><h1 id="3-deque-的操作"><a href="#3-deque-的操作" class="headerlink" title="3 deque 的操作"></a>3 deque 的操作</h1><h2 id="3-1-deque-基本操作"><a href="#3-1-deque-基本操作" class="headerlink" title="3.1 deque 基本操作"></a>3.1 deque 基本操作</h2><pre><code>public:    // 基本访问    iterator begin(){return start;}    iterator end(){return finish;}    reference operator[](size_type n){        return start[difference_type(n)];  // 调用__deque_iterator&lt;&gt;::operator[]    }    reference front(){return *start;}    reference back() {        iterator tmp = finish;        --tmp;        // 调用 __deque_iterator&lt;&gt;::operator--        return *tmp;    }    size_type size() const{return finish - start;}    size_type max_size() const{return size_type(-1);} // ??不明白这个函数    bool empty() const{return finish == start; }</code></pre><p>##3.2  deque的构造和内存管理</p><h3 id="3-2-1-构造"><a href="#3-2-1-构造" class="headerlink" title="3.2.1 构造"></a>3.2.1 构造</h3><ul><li>在前面deque的数据结构中，可以发现deque定义了个空间分配器，一个是用来分配map的空间，一个是用来分配存储空间；</li></ul><p>deque 的一个构造函数如：</p><pre><code>public:    // 构造函数    deque(int n, const value_type&amp; value)        : start(),finish(), map(0), map_size(0){            fill_initialize(n, value);        }protected:    void fill_initialize(size_type n, const value_type&amp; value){        create_map_and_nodes(n);   // 吧deque的结构都产生冰球安排好        map_pointer cur;        __STL_TRY{            // 为每个节点的缓冲区设定初始值            for(cur = start.node;cur&lt; finish.node; ++cur){                uninitialized_fill(*cur, *cur+buffer_size(),value);            }            // 最后一个节点的设定不同（尾部备用空间不用设定初始值）            uninitialized_fill(finish.first,finish.cur,value);        }catch(...){            ...        }    }protected:    //负责产生并且安排好deque的结构    void create_map_and_nodes(size_type num_elements){        // 需要节点数= （元素个数 / 每个缓冲区的大小） +         // 刚好整除，多陪一个节点        size_type num_nodes = num_elements / buffer_size() +1;        // 一个map管理的节点，最少为8个，最多是“所需节点+2”        // 前后预留一个，扩充时使用        map_size = max(initial_map_size(),num_nodes +2);        map = map_allocator::allocate(map_size);        // 令nstart和nfinish指向map拥有的全部节点的中间区段        // 保持在中央，可是头尾两端的扩充能量一样大，        map_pointer nstart = map + (map_size - num_nodes) /2;        map_pointer nfinish = nstart + num_nodes -1;        map_pointer cur;        __STL_TRY{            // 为map内的每个节点配置缓冲区，            for(cur = nstart; cur &lt;=nfinish; ++cur){                *cur = allocate_node();            }        }catch(...){            // &quot;commit of rollback&quot;            ...        }        start.set_node(nstart);        finish.set_node(nfinish);        start.cur  = start.first;        finish.cur = finish.first + num_elements % buffer_size();    }    </code></pre><p>例如：创建一个deque,初始化后，插入了三个值：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-3db6dcdabc25be18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="3-2-2-插入"><a href="#3-2-2-插入" class="headerlink" title="3.2.2 插入"></a>3.2.2 插入</h3><ul><li>push_front()</li><li>push_back()</li></ul><pre><code>public:    void push_back(const value_type&amp; t){        if(finish.cur != finish.last-1){            // 最后缓冲有一个以上的备用空间            construct(finish.cur,t);            ++finish.cur;    // 调整最后缓冲区的状态        }else{  // 最后缓冲区只剩一个备用空间            push_back_aux(t);        }    }    void push_front(const value_type&amp; t){        if(start.cur != start.first){            construct(start.cur -1, t);  // 直接在备用空间构建元素            -- start.cur;        }else{            push_front_aux(t);        }    }</code></pre><p>这两个函数接住了两个辅助函数：</p><pre><code>    // push_bac_aux 先配置一整块新的缓冲区，然后设置新元素，更改finish    void push_bac_aux(const value_type&amp; t){        value_type t_copy=t;        reserve_map_at_back();  // 若符合条件重现换一个map        *(finish.node + 1) = allocate_node(); // 新配置一个节点        __STL_TRY{            construct(finish.cur,t_copy);            finish.set_node(finish.node + 1);  // 改变finish,指向新节点            finish.cur = finish.first;        }        __STL_UNWIND(deallocate_node(*(finish.node + 1)));    }    // push_front_aux 第一缓冲区无备用空间    void push_front_aux(const value_type&amp; t){        value_type t_copy = t;        reserve_map_at_front();   // 若符合条件重现换一个map        *（start.node -1) = allocate_node();  // 配置新节点        __STL_TRY{            start.set_node(start.node - 1);            start.cur = start.last - 1; // 设定start的状态            construct(start.cur, t_copy);        }catch(...){            // &quot;commit or rollback&quot;            start.set_node(start.node + 1);            start.cur = start.first;            deallocate_node(*(start.node - 1);        }    }</code></pre><p>如图：<br><img src="https://upload-images.jianshu.io/upload_images/5361608-85db4fdfb5a59956.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="3-2-3-map的更新"><a href="#3-2-3-map的更新" class="headerlink" title="3.2.3  map的更新"></a>3.2.3  map的更新</h3><ul><li>在插入过程中，导致创建新的缓冲区，因此map的更新：</li></ul><pre><code>protected:    // map 重新配置    void reserve_map_at_back()size_type node_to_add =1){        if(node_to_add +1 &gt; map_size - (finish.node - map)){            // 如果map尾端的节点空间不足，重新配置更大的map空间            reallocate_map(node_to_add,false);        }    }    void reserve_map_at_front(size_type node_to_add =1){        if(node_to_add &gt; start.node - map){            reallocate_map(node_to_add, true);        }    }    // 重新配置map    void reallocate_map(size_type node_to_add, bool add_to_front){        size_type old_num_nodes = finish.node - start.node;        size_type new_num_nodes = old_num_nodes + node_to_add;        map_pointer new_nstart;        if(map_size &gt; 2*new_num_nodes){ // 原来空间足够大，中间平移            new_nstart = map + (map_size - new_num_nodes) /2                        + (add_to_front ? node_to_add  : 0); //             if(new_nstart &lt;start.node){                copy(start.node, finish.node + 1,new_nstart);            }else{                copy_backward(start.node,finish.node, new_nstart + old_num_nodes);            }        }else{            size_type new_map_size = map_size + max(map_size, node_to_add) + 2);            // 配置一块新的空间            map_pointer new_map = map_allocator::allocate(new_map_size);            new_nstart = new_map + (new_map_size - new_num_nodes) /2                        + (add_to_front? node_to_add : 0);            // 把原来map内容拷贝过来            copy(start.node, finish.node+1, new_nstart);            // 释放原来map            map_allocator::deallocate(map, map_size);            map = new_map;            map_size = new_map_size;        }        // 重新设定迭代器        start.set_node(new_nstart);        finish.set_node(new_nstart + old_num_nodes -1);    }</code></pre><h3 id="3-2-4-insert"><a href="#3-2-4-insert" class="headerlink" title="3.2.4 insert()"></a>3.2.4 insert()</h3><pre><code>    // insert         iterator isnert(iterator position, const value_type&amp; x){        if(position.cur == start.cur){// 插入最前端            push_front(x);            return start;        }else if(position.cur = finish.cur){  // 冲入最尾部            push_back(x);            iterator tmp = finish;            --tmp;            return tmp;        }else{            return insert_aux(position, x);        }    }</code></pre><p>辅助函数：</p><pre><code>    // insert_aux    iterator insert_aux(iterator pos, const value_type&amp; x){        difference_type index = pos - start; // 插入之间的元素个数        value_type x_copy = x;        if(index &lt; size() /2 ){  // 插入之前的元素个数较少            push_front(front());   // 在最前端加入与第一元素同值的元素            iterator front1 = start;            ++front1;            iterator front2 = front1;            ++front2;            pos = start + index;            iterator pos1 = pos;            ++pos1;            copy(front2, pos1, front1);  // 元素移动         }else{  // 插入点之后元素比较少            push_back(back());   // 尾端插入与最后一个元素一样的元素            iterator back1 = finish;            -- back1;            iterator back2 = back1;            -- back2;             pos = start + index;            copy(pos, back2, back1);  // 元素移动        }        *pos = x_copy;        return pos;    }</code></pre><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/07/04/STL-%E5%AE%B9%E5%99%A8-deque-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CS131_HomeWork_hw1</title>
      <link>https://jingxa.github.io/2018/07/03/CS131-HomeWork-hw1/</link>
      <guid>https://jingxa.github.io/2018/07/03/CS131-HomeWork-hw1/</guid>
      <pubDate>Tue, 03 Jul 2018 09:02:34 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;cs131 hw1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;参考资料：&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wwdguu/CS131_homework/blob/master/hw1_re
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>cs131 hw1</p></blockquote><hr><ul><li>参考资料：<ul><li><a href="https://github.com/wwdguu/CS131_homework/blob/master/hw1_release/hw1.ipynb" target="_blank" rel="noopener">wwdguu/CS131_homework</a></li><li><a href="https://github.com/mikucy/CS131/blob/master/hw1_release/hw1.ipynb" target="_blank" rel="noopener">mikucy/CS131</a></li></ul></li></ul><hr><blockquote><p>python numpy</p><ul><li>np.var() : 方差</li><li>np.flip() : 矩阵翻转</li><li>np.argmax():     最大值的indices</li></ul></blockquote><hr><h1 id="一、-Convolutions"><a href="#一、-Convolutions" class="headerlink" title="一、 Convolutions"></a>一、 Convolutions</h1><h2 id="1-1-commutative-Property"><a href="#1-1-commutative-Property" class="headerlink" title="1.1 commutative Property"></a>1.1 commutative Property</h2><p><img src="https://upload-images.jianshu.io/upload_images/5361608-4b4cdd9835582008.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>推导两个式子相等：</p><p>令 ：</p><ul><li>x = m-i ==&gt; i = m- x</li><li>y = m- j ==&gt; j = m- y</li></ul><p>带入上式子为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-c611b3175e54daa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后。令 x = i, y =j;即可；</p><h2 id="1-2-Linear-and-Shift-Invariance"><a href="#1-2-Linear-and-Shift-Invariance" class="headerlink" title="1.2 Linear and Shift Invariance"></a>1.2 Linear and Shift Invariance</h2><p><img src="https://upload-images.jianshu.io/upload_images/5361608-583e6584f429e8ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>推导：<br><img src="https://upload-images.jianshu.io/upload_images/5361608-51354bad0e2757e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-850592471aba6fe7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="1-3-实现"><a href="#1-3-实现" class="headerlink" title="1.3 实现"></a>1.3 实现</h2><ul><li>卷积需要翻转卷积核；<h3 id="1-3-1-convoution"><a href="#1-3-1-convoution" class="headerlink" title="1.3.1 convoution"></a>1.3.1 convoution</h3></li><li>使用四个循环<br><code>`</code>python</li></ul><p>def conv_nested(image, kernel):</p><pre><code>Hi, Wi = image.shapeHk, Wk = kernel.shapeout = np.zeros((Hi, Wi))padded = zero_pad(image,Hk//2,Wk//2)kernel = np.flip(np.flip(kernel, 0), 1)  # 上下翻转，在左右翻转### YOUR CODE HEREfor m in range(Hi):    for n in range(Wi):        for i in range(Hk):            for j in range(Wk):                    out[m,n]+=kernel[i,j]*padded[m+i,n+j]return out</code></pre><pre><code>- padding添加：```pythondef zero_pad(image, pad_height, pad_width):    H, W = image.shape    out = np.zeros(shape=(H+pad_height*2,W+pad_width*2),dtype=np.float32)    out[pad_height:pad_height+H,pad_width:pad_width+W]=image[:,:]    return out</code></pre><ul><li>使用矩阵相乘：</li></ul><pre><code class="python">def conv_fast(image, kernel):    Hi, Wi = image.shape    Hk, Wk = kernel.shape    out = np.zeros((Hi, Wi))    padd_H = Hk // 2    padd_W = Wk // 2    img_padd = zero_pad(image, padd_H, padd_W)    # 卷积过程    kernel = np.flip(np.flip(kernel, 0), 1)  # 上下翻转，在左右翻转    for i in range(Hi):        for j in range(Wi):            out[i, j] = np.sum(img_padd[i:(i+Hk), j:(j+Wk)] * kernel)    return out</code></pre><h2 id="part-2-Cross-correlation"><a href="#part-2-Cross-correlation" class="headerlink" title="part 2 Cross-correlation"></a>part 2 Cross-correlation</h2><ul><li><p>cross correlation和卷积一样，只是不需要翻转卷积核；</p></li><li><p>cross correlation</p></li></ul><pre><code class="python">def cross_correlation(f, g):    Hi, Wi = f.shape    Hk, Wk = g.shape    out = np.zeros((Hi, Wi))    padd_H = Hk // 2    padd_W = Wk // 2    img_padd = zero_pad(f, padd_H, padd_W)    # 卷积过程    for i in range(Hi):        for j in range(Wi):            out[i, j] = np.sum(img_padd[i:(i+Hk), j:(j+Wk)] * g)    return out`</code></pre><ul><li>zero_mean_cross_correlation</li></ul><pre><code class="python">def zero_mean_cross_correlation(f, g):    out = None    mean = np.mean(g)    g = np.subtract(g, mean)    out = cross_correlation(f,g)    return out`</code></pre><ul><li>normalized_cross_correlation</li></ul><pre><code>def normalized_cross_correlation(f, g):    # out = None    Hk, Wk = f.shape    Hg, Wg = g.shape    paddedF = zero_pad(f, Hg // 2, Wg // 2)    out = np.zeros_like(f)    # g = np.flip(np.flip(g, 0), 1)    g_mean = np.mean(g)    g_delta = np.sqrt(np.var(g))    g_t = (g - g_mean) / g_delta    for m in range(Hk):        for n in range(Wk):            conv = paddedF[m:(m+Hg), n:(n+Wg)]            f_mean = np.mean(conv)            f_delta = np.sqrt(np.var(conv))            f_t = (paddedF[m:(m+Hg), n:(n+Wg)] - f_mean)/f_delta            out[m, n] = np.sum(f_t * g_t)    print(&#39;end&#39;)    return out</code></pre><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/07/03/CS131-HomeWork-hw1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>STL_4_容器_list</title>
      <link>https://jingxa.github.io/2018/07/02/STL-4-%E5%AE%B9%E5%99%A8-list/</link>
      <guid>https://jingxa.github.io/2018/07/02/STL-4-%E5%AE%B9%E5%99%A8-list/</guid>
      <pubDate>Mon, 02 Jul 2018 02:55:50 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;本文章内容来源于《STL源码分析》第四章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一、-list-概述&quot;&gt;&lt;a href=&quot;#一、-list-概述&quot; class=&quot;headerlink&quot; title=&quot;一、 list 概述&quot;&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文章内容来源于《STL源码分析》第四章</p></blockquote><hr><h1 id="一、-list-概述"><a href="#一、-list-概述" class="headerlink" title="一、 list 概述"></a>一、 list 概述</h1><ul><li>空间运用精准，不浪费</li><li>元素的插入删除， 常数时间</li></ul><h2 id="1-list的节点"><a href="#1-list的节点" class="headerlink" title="1 list的节点"></a>1 list的节点</h2><pre><code class="c++">template&lt;class T&gt;struct __list_node{    typedef void* void_pointer;    void_pointer prev;  // 型别为void* ,其实可设为__list_node&lt;T&gt;*    void_pointer next;    T data;};</code></pre><h2 id="2-迭代器"><a href="#2-迭代器" class="headerlink" title="2 迭代器"></a>2 迭代器</h2><ul><li>类型: 双向迭代器 — Bidirectional iterators</li><li>插入(insert)和接合(splice)操作不会造成原有的迭代器失效</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-8489ae0596b75ed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>实现：</p><pre><code class="c++">/**    list 的迭代器    类型: 双向迭代器 --- Bidirectional iterators*/template&lt;class T, class Ref, class Ptr&gt;struct __list_iterator{    typedef __list_iterator&lt;T,T&amp;,T*&gt; iterator;    typedef __list_iterator&lt;T,Ref,Ptr&gt; self;    typedef bidirectional_iterator_org iterator_category;    typedef T                 value_type;    typedef Ptr                pointer;    typedef Ref                reference;    typedef __list_node&lt;T&gt;* link_type;    typedef size_t             size_type;    typedef    ptrdiff_t        difference_type;    link_type    node;        //迭代器内部的普通指针，指向list节点// 构造函数    __list_iterator(link_type x):node(x){}    __list_iterator(){}    __list_iterator(const iterator&amp; x):node(x.node){}    bool operator==(const self&amp; x) const {return node == x.node;}    bool operator!=(const self&amp; x) const {return node != x.node;}    //以下是对迭代器取值    reference operator*() const {return (*node).data;}    // 迭代器成员存取运算子的标准做法    pointer operator-&gt;() const{reteurn &amp;(operator*());}    // 对迭代器累加1， 就是前进一个节点    self&amp; operator++(){        node = (link_type)((*node).next);        return *this;    }    self operator++(int){        self tmp = *this;        ++*this;        return tmp;    }    //迭代器递减1， 就是后退一个节点    self&amp; operator--(){        node = (link_type)((*node).prev);        return *this;    }    self operator--(int){        self tmp = *this;        --*this;        return tmp;    }};</code></pre><h2 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3 数据结构"></a>3 数据结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/5361608-0854592f11693038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>不仅是一个双向链表</li><li>还是一个环状链表</li><li>让指针node指向刻意置于尾端的空白节点，node便能符合STL的“前闭后开”的区间要求</li></ul><h3 id="3-1-分配器"><a href="#3-1-分配器" class="headerlink" title="3.1 分配器"></a>3.1 分配器</h3><pre><code class="c++">template&lt; class T, Alloc = alloc&gt;class list{protected:    typedef __list_node&lt;T&gt; list_node;    // 专属空间分配器,每次配置一个节点大小    typedef simple_alloc&lt;list_node,Alloc&gt; list_node_allocator;  public:    typedef list_node* link_type;protected:    link_type node;   // 只要一个指针，就可表示整个链表...</code></pre><h3 id="3-2-基本操作"><a href="#3-2-基本操作" class="headerlink" title="3.2 基本操作"></a>3.2 基本操作</h3><ul><li>begin()</li><li>end()</li><li>empty()</li><li>size()</li><li>front()</li><li>back()</li></ul><pre><code class="c++">    // node指向尾端空白节点    iterator begin(){return (link_type)((*node).next);}    iterator end() {return node;}    bool empty() const{return node-&gt;next == node;}    size_type size() const{        size_type result =0;        distance(begin(), end(), result);        return result;    }    // 取头结点的内容    reference front() const {return *begin();}    // 取尾节点的内容    reference back() const { return *(--end());}</code></pre><h2 id="4-构造和内存管理"><a href="#4-构造和内存管理" class="headerlink" title="4 构造和内存管理"></a>4 构造和内存管理</h2><h3 id="4-1-构造和空间分配"><a href="#4-1-构造和空间分配" class="headerlink" title="4.1 构造和空间分配"></a>4.1 构造和空间分配</h3><p>list 提供了很多constructors，其中一个是default constructor</p><pre><code class="c++">public:    // constructers    list(){empty_initialize();} // 产生一个空链表protected:    void empty_initialize(){        node = get_node();        node-&gt;next = node ;        node-&gt;prev = node;  // 头和尾都指向自己，不设值    }</code></pre><ul><li>list 使用<code>alloc</code>作为空间分配器<ul><li>能够配置，释放，构造和销毁一个节点</li></ul></li></ul><pre><code class="c++">template&lt; class T, Alloc = alloc&gt;class list{protected:    typedef __list_node&lt;T&gt; list_node;    // 专属空间分配器,每次配置一个节点大小    typedef simple_alloc&lt;list_node,Alloc&gt; list_node_allocator; ...protected:    /* 配置，释放，构造， 销毁一个节点 */    // 配置一个节点并且返回    link_type get_node(){reteurn list_node_allocator::allocate();}    // 释放一节点    void put_node(link_type p){ list_node_allocator::deallocate(p);}    // 产生一个节点，带有元素值    link_type create_node(const T&amp; x){        link_type p = get_node();        construct(&amp;p-&gt;data, x);    // 全局函数        return p;    }    // 销毁一个节点    void destroy_node(link_type p){        destroy(&amp;p-&gt;data);    // 全局函数        put_node(p);    }...</code></pre><h2 id="4-2-元素操作"><a href="#4-2-元素操作" class="headerlink" title="4.2 元素操作"></a>4.2 元素操作</h2><ul><li>push_front()</li><li>push_back()</li><li>erase()</li><li>pop_front()</li><li>pop_back()</li><li>clear()</li><li>remove()</li><li>unique()</li><li>splice()</li><li>merge()</li><li>reverse()</li><li>sort()</li></ul><h3 id="4-2-1-push-font-和push-back"><a href="#4-2-1-push-font-和push-back" class="headerlink" title="4.2.1 push_font()和push_back()"></a>4.2.1 push_font()和push_back()</h3><ul><li>这两个函数依赖于一个函数<code>insert</code></li></ul><pre><code class="c++">    // 在position 中插入一个节点，值为x    iterator insert(iterator position, const T&amp; x){        link_type tmp = create_node(x);        // 调整双指针        tmp-&gt;next = position.node;        tmp-&gt;prev = position.node-&gt;prev;        (link_type(position.node-&gt;prev))-&gt;next = tmp;        position.node-&gt;prev = tmp;    }</code></pre><ul><li>push_front() 和push_back()</li></ul><pre><code class="c++">    // 插入一个节点，作为头结点    void push_front(const T&amp; x){insert(begin(), x);}    //插入一个节点，作为尾巴节点    void push_back(const T&amp; x){insert(end(),x);}</code></pre><h3 id="4-2-2-erase-pop-font-和pop-back"><a href="#4-2-2-erase-pop-font-和pop-back" class="headerlink" title="4.2.2 erase(), pop_font()和pop_back()"></a>4.2.2 erase(), pop_font()和pop_back()</h3><ul><li>后面两个函数依赖于<code>erase()</code></li></ul><pre><code class="c++">    // 移除 迭代器position的节点,返回下一个节点的迭代器    iterator erase(iterator position){        link_type next_node = link_type(position.node-&gt;next);        link_type prev_node = link_type(position.node-&gt;prev);        prev_node-&gt;next = next_node;        next_node-&gt;prev = prev_node;        destroy_node(position.node);        return iterator(next_node);    }    // 移除头结点    void pop_front(){        erase(begin());    }    //移除尾巴节点    void pop_back(){        iterator tmp == end();        erase(--tmp);    }</code></pre><h3 id="4-2-3-remove-和clear-unique"><a href="#4-2-3-remove-和clear-unique" class="headerlink" title="4.2.3 remove()和clear(), unique()"></a>4.2.3 remove()和clear(), unique()</h3><ul><li>clear()</li></ul><pre><code class="c++">    // 清除所有节点    clear(){        link_type cur = (link_type)node-&gt;next;        while(cur != node){            link_type tmp = cur;            cur = (link_type)cur-&gt;next;            destroy_node(tmp);    // 销毁一个节点        }        // 恢复node原始状态        node-&gt;next = node;        node-&gt;prev = node;    }</code></pre><ul><li>remove()</li></ul><pre><code class="c++">    // 将数值为value的元素移除    remove(const T&amp; value){        iterator first = begin();        iterator last = end();        while(first != last){            iterator next = first;            ++next ;            if(*next == value)erase(next);            first = next;        }    }</code></pre><ul><li>unique()</li></ul><pre><code class="c++">    // 移除数值相同的连续元素 “连续相同的元素”，移除剩余一个    void unique(){        iterator first = begin();        iterator last = end();        if(first == last) return ;  // 空链表，什么都不必做        iterator next = first;        while(++next != last)            if(*first == *next){                erase(next);            }else{                first = next;                next = first;            }    }</code></pre><h3 id="4-2-4-splice-、merge-、reverse-、sort"><a href="#4-2-4-splice-、merge-、reverse-、sort" class="headerlink" title="4.2.4 splice()、merge()、reverse()、sort()"></a>4.2.4 splice()、merge()、reverse()、sort()</h3><ul><li>这几个函数依赖于内部函数<code>transfer</code><br><img src="https://upload-images.jianshu.io/upload_images/5361608-5d2569f43d9a3e18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ul><pre><code class="c++">protected:    // 将[first, last) 内的元素移动到position 之前    void transfer(iterator position, iterator first, iterator last){        if(position != last){            (*(link_type)((*last.node).prev)).next = position.node;  //后一个元素            (*(link_type)((*first.node).prev)).next = last.node; // 前一个元素            (*(link_type)((*position.node).prev).next = first.node;            link_type tmp  = link_type(*(position.node).prev);            (*position.node).prev = (*last.node).prev;            (*last.node).prev = (*first.node).prev;            (*firt.node).prev = tmp;        }    }</code></pre><p><strong>（1） splice()</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-0be901f57d9f5e67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre><code class="c++">// 将x接于position 之前， x必须不同于*thisvoid splice(iterator position, list&amp; x){    if(!x.empty())        transfer(position, x.begin(), x.end());}// 将i所指的元素接于position 之前，position 和i可指向同一个listvoid splice(iterator position, list&amp;, iterator i){    iterator  j = i;    ++j;    if(position == i || position == j)return ;    ransfer(position, i, j);}//将[first, last)内所有的元素接于position 所指位置之前// 可为同一list的迭代器// position 不能在区间之中void splice(iterator position, list&amp;, iterator first,iterator last){    if(first != last){        transfer(position, first, last);    }</code></pre><p><strong>(2) merge()</strong></p><pre><code class="c++">    //  将x合并到*this中，两个list内容必须先经过递增排序    void  merge(list&lt;T,Alloc&gt;&amp; x){        iterator first1 = begin();        iterator last1 = end();        iterator first2 = x.begin();        iterator last2  = x.end();        // 前提是，两个lists都已经经过递增排序        while(first1 != last1 &amp;&amp; first2 != last2){            if(*first2 &lt; *first1){                iterator next = first2;                transfer(first1, first2, ++next);                first2 = next;            }else{                ++first1;            }            if(first2 != last2)transfer(last2, first2, last2);        }    }</code></pre><p><strong>(3) reverse()</strong></p><pre><code class="c++">    //逆向重置    void reverse(){        // 如果空链表，不进行操作        // size ==0 或者 size == 1        if(node-&gt;next == node || link_type(node-&gt;next)-&gt;next == node)            return;        iterator first = begin();        ++ first;        while(first != end()){            iterator old = first;            ++ first;            transfer(begin(), old, first);        }    }</code></pre><p><strong>(4) sort()</strong></p><ul><li>[暂时未读明白]</li></ul><pre><code class="c++">    // list 不能STL算法 sort(), 必须使用自己的sort() member function,    // stl算法 sort()只接受randomAccessIterator    // 本函数采用quick sort    void sort(){        // size ==0 || size ==1        if(node-&gt;next == node || link_type(node-&gt;next)-&gt;next == node)            return ;        // 一些新的lists,作为中介数据存放区        list&lt;T, Alloc&gt; carry;        list&lt;T, Alloc&gt; counter[64];        int fill =0；        while(!empty()){            carry.splice(carry.begin(), *this, begin());            int i=0;            while( i &lt; fill &amp;&amp; !counter[i].empty()){                counter[i].merge(carry);                carry.swap(counter[i++]);            }            carry.swap(counter[i]);            if(i == fill)++fill;        }        for(int i=1 ; i&lt; fill; ++i){            counter[i].merge();        }        swap(counter[fill - 1]);    }</code></pre><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/07/02/STL-4-%E5%AE%B9%E5%99%A8-list/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CS231A_Homework_2.4</title>
      <link>https://jingxa.github.io/2018/06/29/CS231A-Homework-2-4/</link>
      <guid>https://jingxa.github.io/2018/06/29/CS231A-Homework-2-4/</guid>
      <pubDate>Fri, 29 Jun 2018 08:22:58 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;cs231A Homework-2:ps-code2-part-4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;四、Triangulation&quot;&gt;&lt;a href=&quot;#四、Triangulation&quot; class=&quot;headerli
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>cs231A Homework-2:ps-code2-part-4</p></blockquote><hr><h1 id="四、Triangulation"><a href="#四、Triangulation" class="headerlink" title="四、Triangulation"></a>四、Triangulation</h1><h2 id="1-计算过程"><a href="#1-计算过程" class="headerlink" title="1 计算过程"></a>1 计算过程</h2><p>在一个SFM问题中，<br><img src="https://upload-images.jianshu.io/upload_images/5361608-6963a262144aef6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="1-1-变换矩阵"><a href="#1-1-变换矩阵" class="headerlink" title="1.1 变换矩阵"></a>1.1 变换矩阵</h3><ul><li>透视投影中，变换矩阵共有11个自由度；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-3edbf7feab88f62d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="1-1-1-模糊性"><a href="#1-1-1-模糊性" class="headerlink" title="1.1.1 模糊性"></a>1.1.1 模糊性</h3><ul><li>投影变换中，可以用一个任意的4*4矩阵来表达模糊性</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-b04ee09379b657e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="1-1-2-问题"><a href="#1-1-2-问题" class="headerlink" title="1.1.2 问题"></a>1.1.2 问题</h3><ul><li>对于M张图片， n个3D点，存在变换：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-25be029e4a34cfa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><p>因此，SFM问题==&gt; 从m<em>n的观察点中，估计m个3  </em> 4的矩阵和n个位置点；</p></li><li><p>上面可知：已知道的参数为：m张图片；</p><ul><li>如果相机未被校准，3d点也未知，不能计算 从3d点到2d的变换，也就无法求得相机矩阵；</li><li>因此，【采用一种4 * 4投影矩阵，现将点投影过后进行变换】（这个没有搞懂）</li></ul></li></ul><p>-等式的需求：</p><ul><li>11<em>m + 3</em>n -15 个未知数需要 2m*n个等式</li></ul><blockquote><p>不懂为什么要减去15</p></blockquote><hr><h2 id="2-计算方法"><a href="#2-计算方法" class="headerlink" title="2 计算方法"></a>2 计算方法</h2><h3 id="2-1-线性法（通过基础矩阵）"><a href="#2-1-线性法（通过基础矩阵）" class="headerlink" title="2.1 线性法（通过基础矩阵）"></a>2.1 线性法（通过基础矩阵）</h3><p>步骤为：<br><img src="https://upload-images.jianshu.io/upload_images/5361608-6baddccdc7b64486.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>(1) <strong>计算基础矩阵F</strong></p><ul><li>使用投影变换H,使得：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-ca41e3160aebf191.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>那么对于，对应观察点：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-a068e0b2e384d123.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>其中，在叉乘中，</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-6245e42a46cbd158.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看出基础矩阵为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-37c11d1916365451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><strong>F: 使用八点算法计算</strong></li></ul><p>(3) <strong>使用F估计投影相机</strong></p><p>在得到基础矩阵后，<br>那么，可以得出两个观察点之间变换的参数b的计算方法：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-d056a708c90daee4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>最后，A矩阵的计算方法：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-c800177439cf3529.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>参数b的性质符合下面：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-57da4b0fb203a2a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>因此，b是一个极点！<br>那么最终得到的矩阵为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-d23d4cf324b53352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>(3) <strong>估计 3d点</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-7aa3144bd8758b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="3-python-实现"><a href="#3-python-实现" class="headerlink" title="3 python 实现"></a>3 python 实现</h2><h3 id="3-1-估计两幅图片的变换矩阵RT"><a href="#3-1-估计两幅图片的变换矩阵RT" class="headerlink" title="3.1 估计两幅图片的变换矩阵RT"></a>3.1 估计两幅图片的变换矩阵RT</h3><ul><li><p>通过 本质矩阵求 R,T</p></li><li><p>在标准相机和非标准相机中，存在：</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-581c6327efd6eaac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-0494233d51db29c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-47bdfea9649897c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-2b94f27a4cb512bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>因此可以通过分解本质矩阵来求得 R,T;</li></ul><p>计算过程为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-ca3aaeab50e1a5da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>【代码】</p><pre><code class="python">def estimate_initial_RT(E):    # SVD分解    u, s, vt = np.linalg.svd(E)    # 计算R    z = np.array([        [0, 1, 0],        [-1, 0, 0],        [0, 0, 0]    ])    w = np.array([        [0, -1, 0],        [1, 0, 0],        [0, 0, 1]    ])    M = u.dot(z).dot(u.T)    Q1 = u.dot(w).dot(vt)    R1 = np.linalg.det(Q1) * Q1    Q2 = u.dot(w.T).dot(vt)    R2 = np.linalg.det(Q2) * Q2    # 计算 T,T为u的第三列    T1 = u[:, 2].reshape(-1,1)    T2 = - T1    # R 有两种， T有两种，一共四中可能    R_set = [R1, R2]    T_set = [T1, T2]    RT_set = []    for i in range(len(R_set)):        for j in range(len(T_set)):            RT_set.append(np.hstack( (R_set[i], T_set[j]) ))    RT = np.zeros((4, 3, 4))    for i in range(RT.shape[0]):        RT[i, :, :] = RT_set[i]    return RT</code></pre><h3 id="3-2-不同图片中的对应点"><a href="#3-2-不同图片中的对应点" class="headerlink" title="3.2 不同图片中的对应点"></a>3.2 不同图片中的对应点</h3><p><img src="https://upload-images.jianshu.io/upload_images/5361608-34352a4e92bbf406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>对应3D点和图片上的点，存在上<code>p = MP&#39;</code>,在齐次坐标系下，得到上式；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-4f0424a16bb4daa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>因此，A矩阵为（）：</p><p><img src="https://latex.codecogs.com/gif.latex?%5Cbegin%7Bbmatrix%7D%20m_%7B1%7D-u_%7B1%7Dm_%7B3%7D%20%5C%5C%20m_%7B2%7D-v_%7B1%7Dm_%7B3%7D%5C%5C%20...%5C%5C%20m_1-u_%7Bn%7Dm_%7B3%7D%5C%5C%20m_%7B2%7D-v_%7Bn%7Dm_%7B3%7D%20%5Cend%7Bbmatrix%7D" alt=""></p><ul><li>这里， M是已知的，将 3D点P作为未知数；</li><li>使用svd分解；</li></ul><p>【代码】</p><pre><code class="python">def linear_estimate_3d_point(image_points, camera_matrices):    # 传入两个点， 两个相机矩阵    N = image_points.shape[0]   # N == 2    # 建立系数矩阵    A = np.zeros((2*N, 4))  # 每一点建立两个等式    A_set = []    for i in range(N):        pi = image_points[i]        Mi = camera_matrices[i]        x = pi[0] * Mi[2] - Mi[0]        y = pi[1] * Mi[2] - Mi[1]        A_set.append(x)        A_set.append(y)    for i in range(A.shape[0]):        A[i] = A_set[i]    u, s, vt = np.linalg.svd(A)    p = vt[-1]      # 取最后一列    p = p / p[-1]       # 齐次坐标，最后一个为1    p = p[:3]       # 取前三个，3D坐标    return p</code></pre><h3 id="3-3-优化：计算对应点的重投影误差"><a href="#3-3-优化：计算对应点的重投影误差" class="headerlink" title="3.3 优化：计算对应点的重投影误差"></a>3.3 优化：计算对应点的重投影误差</h3><ul><li>给一张图片i ,给定一个相机矩阵 Mi, 还有3D 的点P,得到：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-28a616f7ee46a342.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-a241e0b53d76f2d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>投影误差为：</p><p><img src="https://upload-images.jianshu.io/upload_images/5361608-c5c14c63438ac4bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>每个e都是(2 <em> 1)的向量，可以对e求导，有K个相机位置，那么雅克比矩阵为（ 2K </em> 3）：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-ca2844b513ce5a5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>本题提供一个真实3d点：</li><li>对一个点求导得：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-dea44473877e5b3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>一个投影点有(x,y)，得到两个等式，可得两个偏导数</li></ul><p>代码为：</p><pre><code class="python">def reprojection_error(point_3d, image_points, camera_matrices):    # 图像点的数量    3d点：1， 2d点： 2， 相机矩阵 2    N = image_points.shape[0]    # 建立其次坐标系    point_3d_homo = np.hstack((point_3d, 1))    error_set = []    # 计算误差    for i in range(N):        pi = image_points[i]        Mi = camera_matrices[i]        Yi = Mi.dot(point_3d_homo)  # 3d点的投影        pi_prime = 1.0 / Yi[2] * np.array([Yi[0], Yi[1]])       # 转变为2d点        error_i = pi_prime - pi        error_set.append(error_i[0])        # x 误差        error_set.append(error_i[1])        # y 误差    # 变换成 array    error = np.array(error_set)    return errordef jacobian(point_3d, camera_matrices):    # 一个 3D点， 2个相机矩阵    K = camera_matrices.shape[0]    J = np.zeros((2 * K, 3))        # 2*k, 3    #  齐次坐标系    point_3d_homo = np.hstack((point_3d, 1))    J_tmp = []    # 计算 雅克比矩阵    for i in range(K):        Mi = camera_matrices[i]        pi = Mi.dot(point_3d_homo)      # 投影点        Jix =(pi[2]*Mi[0] - pi[0] * Mi[2] ) / pi[2]**2      # x        Jiy =(pi[2]*Mi[1] - pi[1] * Mi[2]) / pi[2]**2       # y        J_tmp.append(Jix)        J_tmp.append(Jiy)    for i in range(J.shape[0]):        J[i] = J_tmp[i][:3]         # J_tmp 每一行包含齐次坐标，去掉最后一列    return J</code></pre><h3 id="3-4-高斯牛顿法"><a href="#3-4-高斯牛顿法" class="headerlink" title="3.4  高斯牛顿法"></a>3.4  高斯牛顿法</h3><ul><li>寻找一个近似最小化重投影误差；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/5361608-6c176df1512910f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>代码为：</p><pre><code class="python">def nonlinear_estimate_3d_point(image_points, camera_matrices):    # 计算初始估计的真实点    P = linear_estimate_3d_point(image_points, camera_matrices)    # 迭代10 次    for i in range(10):        e = reprojection_error(P, image_points, camera_matrices)        J = jacobian(P, camera_matrices)        P -= np.linalg.inv(J.T.dot(J)).dot(J.T).dot(e)    return P</code></pre><h3 id="3-5-估计-R-T"><a href="#3-5-估计-R-T" class="headerlink" title="3.5 估计 R, T"></a>3.5 估计 R, T</h3><ul><li>估计最有可能的R,T变换；</li><li>在第一个问题中，从本质矩阵中估计了4个 最有可能的RT矩阵，本次从中选择最优的一个；</li></ul><ol><li>首先， 对每一对R,T ， 计算3D点的对应位置；</li><li>正确的R,T从图片中估计的3D点拥有正向的深度值，即z值；</li><li>正向的值是相对于其相对的相机位置；所以，3d点先要变换到当前相机坐标系下；</li></ol><pre><code class="python">def estimate_RT_from_E(E, image_points, K):    # 获得四队RT    RT = estimate_initial_RT(E)    count = np.zeros((1, 4))        # 每一对的估计得分    I0 = np.array([[1.0, 0, 0, 0],                   [0, 1.0, 0, 0],                   [0, 0, 1.0, 0]])     # [I 0] 设第一个相机为初始位置    M1 = K.dot(I0)      # 第一个相机的变换矩阵    camera_matrices = np.zeros((2, 3, 4))       # 建立两个相机变换矩阵    camera_matrices[0] = M1    for i in range(RT.shape[0]):        # 对每一个RT进行测试        rt = RT[i]        M2_i = K.dot(rt)        camera_matrices[1] = M2_i       # 临时第二个相机变换矩阵        for j in range(image_points.shape[0]):      # 估计 3D点            point_j_3d = nonlinear_estimate_3d_point(image_points[j], camera_matrices)            pj_homo = np.vstack((point_j_3d.reshape(3, 1), [1]))      # 转换为齐次坐标            pj_prime = camera1tocamera2(pj_homo, rt)      # 将3d点变换到相对的相机坐标系下            if pj_homo[2] &gt; 0 and pj_prime[2] &gt; 0:                count[0, i] += 1     # 3D点面向相机 ，z值为正， 计算正确    maxIdx = np.argmax(count)    maxRT = RT[maxIdx]    return maxRTdef camera1tocamera2(P, RT):    P_homo = np.array([P[0], P[1], P[2], 1.0])    A = np.zeros((4, 4))    A[0:3, :] = RT    A[3, :] = np.array([0, 0, 0, 1.0])    P_prim_homo = A.dot(P_homo.T)    P_prim_homo /= P_prim_homo[3]    P_prime = P_prim_homo[0:3]    return P_prime</code></pre><h2 id="4-结果"><a href="#4-结果" class="headerlink" title="4. 结果"></a>4. 结果</h2><pre><code>Part A: Check your matrices against the example R,T--------------------------------------------------------------------------------Example RT: [[ 0.9736 -0.0988 -0.2056  0.9994] [ 0.1019  0.9948  0.0045 -0.0089] [ 0.2041 -0.0254  0.9786  0.0331]]Estimated RT: [[[ 0.98305251 -0.11787055 -0.14040758  0.99941228]  [-0.11925737 -0.99286228 -0.00147453 -0.00886961]  [-0.13923158  0.01819418 -0.99009269  0.03311219]] [[ 0.98305251 -0.11787055 -0.14040758 -0.99941228]  [-0.11925737 -0.99286228 -0.00147453  0.00886961]  [-0.13923158  0.01819418 -0.99009269 -0.03311219]] [[ 0.97364135 -0.09878708 -0.20558119  0.99941228]  [ 0.10189204  0.99478508  0.00454512 -0.00886961]  [ 0.2040601  -0.02537241  0.97862951  0.03311219]] [[ 0.97364135 -0.09878708 -0.20558119 -0.99941228]  [ 0.10189204  0.99478508  0.00454512  0.00886961]  [ 0.2040601  -0.02537241  0.97862951 -0.03311219]]]--------------------------------------------------------------------------------Part B: Check that the difference from expected point is near zero--------------------------------------------------------------------------------Difference:  0.0029243053036863698--------------------------------------------------------------------------------Part C: Check that the difference from expected error/Jacobian is near zero--------------------------------------------------------------------------------Error Difference:  8.301299988565727e-07Jacobian Difference:  1.817115702351657e-08--------------------------------------------------------------------------------Part D: Check that the reprojection error from nonlinear methodis lower than linear method--------------------------------------------------------------------------------Linear method error: 98.73542356894183Nonlinear method error: 95.59481784846034--------------------------------------------------------------------------------Part E: Check your matrix against the example R,T--------------------------------------------------------------------------------Example RT: [[ 0.9736 -0.0988 -0.2056  0.9994] [ 0.1019  0.9948  0.0045 -0.0089] [ 0.2041 -0.0254  0.9786  0.0331]]Estimated RT: [[ 0.97364135 -0.09878708 -0.20558119  0.99941228] [ 0.10189204  0.99478508  0.00454512 -0.00886961] [ 0.2040601  -0.02537241  0.97862951  0.03311219]]--------------------------------------------------------------------------------Part F: Run the entire SFM pipeline--------------------------------------------------------------------------------</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/5361608-cd68806911f3d3b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><hr>]]></content:encoded>
      
      <comments>https://jingxa.github.io/2018/06/29/CS231A-Homework-2-4/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
